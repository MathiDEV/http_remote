#!/usr/bin/python3
content = "#!/usr/bin/python3
code = "IyEvdXNyL2Jpbi9weXRob24zCgppbXBvcnQgYmFzZTY0CmltcG9ydCBqc29uCmltcG9ydCBvcwppbXBvcnQgdGVtcGZpbGUKaW1wb3J0IHN1YnByb2Nlc3MKCmZpbGVzID0gImV5SnRiM1ZzYVNJNklDSkplVVYyWkZoT2VVd3lTbkJpYVRsM1pWaFNiMkl5TkhwRFozQndZbGhDZG1OdVVXZGlNMDFMUTIxa2RtSXlVV2RRVTBGcFNXZHdNR1ZJVW1aa1NFcG9XVEpWWjFCVFFXbEpaM0F3V2xoT01GZ3lOV2hpVjFaNlNVUXdaMWN4TUV0ak0xSXhXa05CT1VsRFNXbERiVlkwWWpOTloxQlRRbUpKYlRFMVdESTFhR0pYVldsTVEwRnBXa2RzYm1GWVVucEphWGRuU1c1S2JHUnRSbk5qUjJob1NXbDNaMGx0Um5OWlZ6VnJZMjA1Y0dSRFNYTkpRMHBvWWtkR2RXUnRWbmxKYVhkblNXMU9kbVJYTlRCaU1rMXBURUZ2WjBsRFFXZEpRMEZuU1VOS2VWcFlRbXhaV0ZKbVdWZDRkMkZIUldsTVEwRnBZVWRzYTFwWE5UQmFhVWx6U1VOS2VXSXpVbVpPUkVscFRFTkJhV0pIUm5wa1Jqa3pZak5LYTBscGQyZEpia3BtV1RKR2QyRllVbWhpUjJ3MldsTkpjMGxEU25kYU1rNXJTV2wzWjBsdFduZGpiV3gwV2xOS1pFTm5iMHRhUjFadFNVaENlV0ZYTlRCWU1tUjVXbGRXZFV0SVVteGxTRkZ3VDJkdlowbERRV2RqU0Vwd1ltNVJiMGxzZDNkTmVrNWlUMVJLZEVscFFYSkpTRkpzWlVoUlowdDVRV2xZUkVGNlRURnpkMkpUU1hCRFoyOUxXa2RXYlVsSVFubGhWelV3V0ROS2JGcERhREJhV0dnd1MxUnZTMGxEUVdkSlNFSjVZVmMxTUV0RFNtTk5SRTE2VjNwcmVHSlRTV2RMZVVJd1dsaG9NRWxEYzJkSmJIZDNUWHBPWWsxSE1HbExVVzlMUTIxU2JGcHBRbmRqYld4MVpFWTVhV0pJVm14TFNGSnNaVWhSY0U5bmIyZEpRMEZuWTBoS2NHSnVVVzlKYkhkM1RYcE9ZazlVVW5SSmFVRnlTVWhTYkdWSVVXZExlVUZwV0VSQmVrMHhjM2RpVTBsd1EyZHZTMXBIVm0xSlNFSjVZVmMxTUZneU9YbFpWelZ1V2xOb01GcFlhREJMVkc5TFNVTkJaMGxJUW5saFZ6VXdTME5LWTAxRVRYcFhlbXQ2WWxOSlowdDVRakJhV0dnd1NVTnpaMGxzZDNkTmVrNWlUVWN3YVV0UmIwdERiVkpzV21sQ2IxbFlTbXRZTWs1dldsZE9jbGd5TldoaVYxVnZXbGQ0YkdKVGF6WkRhVUZuU1VOQ2NGcHBRbk5hVnpSdldsZDRiR0pUYTJkUWFVRjRUMmR2WjBsRFFXZEpRMEZuU1VoS2JHUklWbmxpYVVGNFEybEJaMGxEUW5sYVdGSXhZMjAwWjAxQmIwdERiVkpzV21sQ2FtRkhWbXBoTVRscVlVZFdhR1JEYUhWWlZ6RnNTMVJ2UzBsRFFXZEpTRko1WlZSdlMwbERRV2RKUTBGblNVTkNNRnBZYURCWU1scHdZa2RWWjFCVFFuWmpSMVoxUzBjMWFHSlhWV2RMZVVGcFRIbEpaMHQ1UW5WWlZ6RnNTVU56WjBscE5XcEphWGRuU1c1SmFVdFJiMmRKUTBGblNVTkJaMGxJVGpCYVIwMW5VRk5DTUZwWWFEQllNbHB3WWtkVmRXTnRWbWhhUTJkd1EybEJaMGxEUVdkSlEwRm5aRWRXTkdSR09XMWhWM2hzVEcxT2MySXpUbXhMUTJ0TFEybEJaMGxEUVdkSlEwRm5ZVmRaWjBscFFuZGpiV3gxWkVkWmIwbHBRbkJpYVVKNlpFZFNha2xIT1hsSlEwbG5ZMGhXTUdONVoybEpSMngxU1VoT01GcEhUV2RpTTBsblNXbENlbU5JU25CaWJsSnRTME5KWjJGWE5HZGpNMUpyV1hsQ2RtTnBRV2xKUjFKM1kyMXNkV1JIV1c5SmFVSndZbWxDZW1SSFVtcEpSemw1U1VOSloxbFlVblpoVTJkcFNVZHNkVWxJVGpCYVIwMDJRMmxCWjBsRFFXZEpRMEZuU1VOQlowbElTbXhrU0ZaNVltbEJlRU5wUVdkSlEwRm5TVU5CWjJOdFZqQmtXRXAxU1VSQlMwbERRV2RKUjFZMFdUSldkMlJFYjB0SlEwRm5TVU5CWjBsRFFubGFXRkl4WTIwMFowMUJiMHREYlZKc1dtbENibHBZVW1aa1NFcG9XVEpXWmxwcFozQlBaMjluU1VOQloySXpUWFZqTTJ4NlpFZFdkRXREU2pCaFZ6RnNZak5XTUVsRVNucEpRelIyV1ZNMWRtUllVV2RRYVVJd1kyMUdhbHBUU1hCRFoyOW5TVU5CWjJSSVNqVlBaMjluU1VOQlowbERRV2RKU0ZKc1pVaFNabHB0YkhOYVUwRTVTVWM1ZDFwWE5HOUpibEo1V1ZkT2JFbHBkMmRKYmtscFMxRnZaMGxEUVdkSlEwRm5TVWhTZVZsWFRteEpSREJuWkVkV05HUkdPVzFoVjNoc1RHNUtiRmxYVVc5TFVXOW5TVU5CWjBsRFFXZEpTRko1V1ZkT2JFbEVNR2RYTWxWbldtMDVlVWxIVldkaFZ6Um5aRWhLYUZreVZYVmpNMEp6WVZoUmIwcDVVVzVMVTBKd1dtbENjMXBYTkc5YVUydG5VR2xCZDFoUmIyZEpRMEZuU1VOQlowbElVbXhsU0ZKbVdtMXNjMXBUTldwaVJ6bDZXbE5uY0VOcFFXZEpRMEpzWlVkT2JHTklVVFpEYVVGblNVTkJaMGxEUVdkalNFcHdZbTVTWm1OdFZtdExRMHBGWTIwNWMxcFRRbXRLTWxaNVkyMVdNV05wUW1oalNFSnNZa2Q0YkVsSVZuVkpSMDUyV1c1S2FFbHBhMHRKUTBGblNVTkJaMGxEUW14bFIyd3dTMFJuTUV0UmIyZEpRMEZuWWpOTmRXTXpiSHBrUjFaMFMwTktlV0pUUWpCamJVWnFXbE5DYUV4dE9URmtRMGx3UTJsQlowbERRbmxhV0ZJeFkyMDBaMlJJU21oWk1sVkxRMmR3YTFwWFdXZGpSMFo1WXpKV1ptSXpWakJqU0ZZd1MwZFNhR1JIUlhCUFoyOW5TVU5CWjJGVFFUbEpSRUZMU1VOQlowbEhXblpqYVVKc1lrZFdkRWxIYkhWSlIxSm9aRWRGTmtOcFFXZEpRMEZuU1VOQloxcFhlR3hpVTBFNVNVWjBiRWxIV25aamFVSnNTVWRzZFVsSFZuTmFWekIxWXpOQ2MyRllVVzlLZVZWdVMxTkNjRnBwUW5OYVZ6UnZXbE5yWjFCcFFYZFlVVzluU1VOQlowbERRV2RKU0ZKc1l6TlNabUp0Um5SYVdFMTFXVmhDZDFwWE5XdExSMVp6V2xjeFlrMUdNSEJEYVVGblNVTkJaMGxEUVdkYVIwWXdXVlowY0ZoVFFUbEpSMUpvWkVkR1ltRldNV0ppUjFaMVMwZFdjMXBYTVdKTlJqQndTVU56WjAxVWNHUkRhVUZuU1VOQlowbERRV2RoVTBGeVVGTkJlRU5wUVdkSlEwSjVXbGhTTVdOdE5HZGFSMFl3V1ZGdlMwTnRVbXhhYVVKdVdsaFNabVJJU21oWk1sVnZZbTFHZEZwVGF6WkRhVUZuU1VOQ01HTnVhelpEYVVGblNVTkJaMGxEUVdkWk1qbDVZMjFXYWtsRU1HZEpiVTUyWTI1S2JGa3pUWFpKYVVGeVNVYzFhR0pYVldkTGVVRnBUSGxKWjB0NVFuVlpWekZzU1VOelowbHBOV3BKWjI5blNVTkJaMGxEUVdkSlJ6Rm9ZVmMwWjFCVFFXbGlWMFp3WW01TmRrbHBRWEpKUnpWb1lsZFZaMHQ1UVdsTWJVMXBRMmxCWjBsRFFXZEpRMEZuWXpOU01WcElVV2RRVTBKMVdWY3hiRWxEYzJkSmFUaHBTVU56WjJKdFJuUmFVMEZ5U1VOSmRWbDVTVXRKUTBGblNVTkJaMGxEUW5aamVUVjZaVmhPTUZwWE1HOUpiV1JxV1hsQmFVbERjMmRpVjBad1ltbEJja2xEU1dkSmFVRnlTVWRPZG1OdVNteFplVUZ5U1VOSloxQnBRWFphUjFZeVRESTFNV0pIZDJsTFVXOW5TVU5CWjBsRFFXZEpSMlIyWWpKUloxQlRRbTVhV0ZKbVpFaEthRmt5Vm1aYWFXZHdRMmxCWjBsRFFXZEpRMEZuV2pJNWRscERRVGxKU0VKb1kyNU9iRmd5T1RGa1NFSXhaRU5vYm1JeU9XdExVVzluU1VOQlowbERRV2RKUnpsNlRHNU9OV016VW14aVUyZHBXakpPYWtsRFNXZExlVUowV1Zkc2RVbERjMmRKYVVGcFNVTnpaMk16VWpGYVNGRm5TM2xCYVVsRU5HZE1NbEpzWkdrNWRXUlhlSE5KYVd0TFNVTkJaMGxEUVdkSlEwSjZaRWhXYTBsRU1HZGFNbFl3V0ROU2VWbFhUbXhZTWxsdlMxRnZaMGxEUVdkSlEwRm5TVWhPTUdSWFVXZFFVMEozV1ZoS2VscFdPWFprV0ZKM1pGaFJiMk16VWpGYVEydExTVU5CWjBsSFZqUlpNbFozWkVSdlMwbERRV2RKUTBGblNVTkNhbUl5TVhkaFYzaHNTVVF3WjAxUmIyZEpRMEZuWTIxV01HUllTblZKUjJSMllqSlJjMGxJVGpCa1YxRkxRMmR3YTFwWFdXZFpNbWhzV1RKMFptUkhWbnBrU0UxdldqSTVkbHBEZDJkak0xSXhXa04zWjJSSFZucGtSamwxV1ZjeGJHTjVkMmRhVjNoc1lsTnJOa05wUVdkSlEwSndTVVF3WjAxQmIyZEpRMEZuWVZkWloxcFhlR3hpVTBFNVVGTkJhV0pZYkdaaWJVWjBXbE5KTmtOcFFXZEpRMEZuU1VOQloyRlhXV2RpUjFaMVMwaE9NR1JYVW1KaFZqQndTVVIzT1VsRVJUWkRhVUZuU1VOQlowbERRV2RKUTBGblNVaENlV0ZYTlRCTFEwcGpUVVJOZWxkNmEzaGlVMGxuUzNsQ01GcFlUakJZTWpWb1lsZFdlbGN5YkdSSlEzTm5TV2xCT1V4Nk5HZFNhMFpLVkVWV1JWaEhOR2xKUTNOblNXeDNkMDE2VG1KTlJ6QnBURU5DYkdKdFVUbEphVWx3UTJsQlowbERRV2RKUTBGblNVTkJaMGxJUW5saFZ6VXdXREk1ZVZsWE5XNWFVMmRwVWxob2QxcFhUakJhVjFGbldWTkNkVmxYTVd4SlNHUndaRWRuWjFsVFFuTmFWelZ1WkVkbloxQnBRWGhKYVd0TFNVTkJaMGxEUVdkSlEwSnNZa2hPYkU5bmIyZEpRMEZuU1VOQlowbERRV2RKUTBKM1kyMXNkV1JHT1c1amJWWnNZbWxvTUZwWVRqQllNalZvWWxkV2VsY3liR1JKUTNOblNXbEJPVkJwUWxGUlZrNVVVbFZSYVV0UmIyZEpRMEZuU1VOQlowbElVbXhqTTFKbVltMUdkRnBZVFdkUVUwSmlXRkZ2WjBsRFFXZEpRMEZuU1VoS2JHUklWbmxpWjI5blNVTkJaMlF5YUhCaVIxVm5ZVk5CT0VsSGVHeGlhV2h1WWpJNWEwdFViMHRKUTBGblNVTkJaMGxEUW5CYWFVSnVZakk1YTFjeWJHUkpRMFU1U1VoT01HUlhVbUpoVmpBMlEybEJaMGxEUVdkSlEwRm5TVU5CWjBsSVFubGhWelV3UzBOS1kwMUVUWHBYZW10NFlsTkpaMHQ1UWpCYVdFNHdXREkxYUdKWFZucFhNbXhrU1VOelowbHBRVGxNZWpSblVtdEdTbFJGVmtWWVJ6UnBTVU56WjBsc2QzZE5lazVpVFVjd2FVeERRbXhpYlZFNVNXbEpjRU5wUVdkSlEwRm5TVU5CWjBsRFFXZEpTRUo1WVZjMU1GZ3lPWGxaVnpWdVdsTm5hVWxEUVdkSlEwSklWREZSTmtsRFNXZExlVUo2WkVoV2ExY3liR1JKUTNOblNXdFdXVlZGVmtSV1JWWkZUMmxCYVVsRGMyZGFNamwyV2taMGNGaFRhMHRKUTBGblNVTkJaMGxEUW14aVNFNXNUMmR2WjBsRFFXZEpRMEZuU1VOQlowbERRbmRqYld4MVpFWTVibU50Vm14aWFXZ3dXbGhPTUZneU5XaGlWMVo2VnpKc1pFbERjMmRKYVVFNVVHbENVVkZXVGxSU1ZWRnBTMUZ2WjBsRFFXZEpRMEZuU1VkclowdDZNR2ROVVc5blNVTkJaMlJIVm5wa1JqbDFXVmN4YkdONVFUbEpSblJrUTJkdlMxcEhWbTFKUnpGMlpGZDRjRXREYXpaRGFVRm5TVU5DYldJelNXZGFWM2hzWWxOQ2NHSnBRbXhsUnpsNlQyZHZaMGxEUVdkSlEwRm5TVWhTYkdNelVtWmliVVowV2xoTmRWa3llR3haV0VsdlMxRnZaMGxEUVdkSlEwRm5TVWRrZG1JeVVXZFFVMEZwU1dkdlowbERRV2RKUTBGblNVaE9NR1JYVVdkUVUwRnBTV2R2WjBsRFFXZEpRMEZuU1VoQ2VXRlhOVEJZTWtwelpGZFZiMGxxTURsUVZEQTVVRlF3T1ZCVU1EbFFWREE1VUZOQ1ZWcFlUakJKUnpsMVNVTkpaMHQ1UW14aVIxWjBTVU56WjBscU1EbFFWREE1VUZRd09WQlVNRGxRVkRBNVVGTkpjRU5wUVdkSlEwRm5TVU5CWjJGWFdXZGliVGt3U1VjNWVreHVRbWhrUjJkMVlWaE9hMkZZU1c5YVYzaHNZbE5yWjJJelNXZGliVGt3U1VjNWVreHVRbWhrUjJkMVlWaE9iV0ZYZUd4TFIxWnpXbGN3WjB0NVFXbE1lVWxuUzNsQ2JHSkhWblJKUTNOblNXazFha2xwYXpaRGFVRm5TVU5CWjBsRFFXZEpRMEZuU1VoQ2VXRlhOVEJZTTBwc1drTm5hVlJYYkhwak1teDFXbmxDYTJGWVNteFpNMUoyWTI1cloySXpTV2RhYld4eldsTkNiV0l6U1dkSmFVRnlTVWRXYzFwWE1HZExlVUZwU1VOR1kySnBTWEJEYVVGblNVTkJaMGxEUVdkSlEwRm5TVWRPZG1KdVVuQmlibFpzUTJsQlowbERRV2RKUTBGbllWZFpaMWt5YUd4Wk1uUm1XVEpvYkZsWVVXOWFWM2hzWWxOck5rTnBRV2RKUTBGblNVTkJaMGxEUVdkSlNFSjVZVmMxTUZnelNteGFRMmRwVVRCb1JsRldVV2RhUjFZd1dsZE9NRnBYVVdkWmJVWjFZbTFXYTBsSFdqRmliVTR3WVZjNWRVbEViMjlZUnpScFMxRnZaMGxEUVdkSlEwRm5TVU5CWjBsRFFtcGlNalV3WVZjMU1WcFJiMmRKUTBGblNVTkJaMGxIWkhaaU1sRnpTVWhPTUdSWFVXZFFVMEp1V2xoU1ptUklTbWhaTWxWdldsZDRiR0pUYTB0SlEwRm5TVU5CWjBsRFFtcGhSMVpxWVRFNU1GcFlUakJqZVdodVlqSTVhMHhEUW5wa1NGWnJURU5DTUZwWVRqQllNalZvWWxkV2VreERRbXhpUjFaMFMxRnZaMGxEUVdkSlEwRm5TVWhDZVdGWE5UQkxRMnRMUTJkd2RHSXpWbk5oVTJkd1EyYzlQU0lzSUNKamIzSnlaV056TDJGc1lXNTJaWEl2WVd4aGJuWmxjaTVqSWpvZ0lra3liSFZaTW5neFdrZFZaMUJJVm5WaFdFNHdXa00xYjFCbmIwdGpNMUpvWkVkc2FrbEhiSFZrUTBKMFpWWTVlbVJJU25OYVZ6UnZXVEpvYUdOcFFYRmpNMUo1UzFGd04wTnBRV2RKUTBKd1ltNVJaMkZUUVRsSlJFRTNRMmxCWjBsRFFqTmhSMnh6V2xOQmIyTXpVbmxYTW14a1NVTkZPVWxEWkdOTlEyTndRMmxCWjBsRFFXZEpRMEZuWVZOemNrOTNiMmRKUTBGblkyMVdNR1JZU25WSlIyczNRMjR3UzBOdVduWmhWMUZuV1ZkNGFHSnVXbXhqYVdocVlVZEdlVWxEY0hwa1NFbHdRMjV6UzBsRFFXZEpSMngxWkVOQ2NFbEVNR2RpV0d4bVl6TlNlV0pIVm5WTFNFNHdZMmxyWjB4VFFYaFBkMjlMU1VOQlowbElaRzloVjNoc1NVTm9lbVJJU21KTVV6RndXRk5yUzBsRFFXZEpRMEZuU1VOQ00yTnRiREJhVTJkNFRFTkJiV016VW5sWE1teGtURU5CZUV0VWMwdG1VVzg5SWl3Z0ltTnZjbkpsWTNNdlkyOTFiblJ2WXk5amIzVnVkRzlqTG1NaU9pQWlTVEpzZFZreWVERmFSMVZuVUVoV2RXRllUakJhUXpWdlVHZHZTMkZYTlRCSlIwNTJaRmMxTUdJeVRXOVpNbWhvWTJsQmNXTXpVbmxNUTBKcVlVZEdlVWxJVW5aWU1scHdZbTFSY0VOdWMwdEpRMEZuU1Vkc2RXUkRRbkJKUkRCblRGUkZOME5wUVdkSlEwSndZbTVSWjFreU9URmlibEZuVUZOQmQwOTNiMHRKUTBGblNVaGtiMkZYZUd4SlEyaDZaRWhLWWt0NWRIQllVMnRMU1VOQlowbERRV2RKUTBKd1dtbEJiMk16VW5sWE1teGtTVVF3T1VsSVVuWllNbHB3WW0xUmNFTnBRV2RKUTBGblNVTkJaMGxEUVdkSlIwNTJaRmMxTUV0NWN6ZERhVUZuU1VOQ2VWcFlVakZqYlRSblMwZE9kbVJYTlRCTFZITkxabEU5UFNJc0lDSmpiM0p5WldOekwyUnBaMmwwY3k5a2FXZHBkSE11WXlJNklDSkpNbXgxV1RKNE1WcEhWV2RRU0ZaMVlWaE9NRnBETlc5UVoyOUxaRzA1Y0ZwRFFtdGhWMlJ3WkVoTmIyUnRPWEJhUTJ0TFpYZHZaMGxEUVdka00wcHdaRWRWYjAxVGQyZEpha0Y0VFdwTk1FNVVXVE5QUkd4alltbEpjMGxFUlhoTFZITkxabEU5UFNJc0lDSmpiM0p5WldOekwyeGhjM1JmZDI5eVpDOXNZWE4wWDNkdmNtUXVZeUk2SUNKSk1teDFXVEo0TVZwSFZXZFFTRloxWVZoT01GcEROVzlRWjNBeVlqSnNhMGxIZUdoak0xSm1aREk1ZVZwRGFHcGhSMFo1U1VOd2VtUklTWEJEYm5OTFNVTkJaMGxIYkhWa1EwSnhUM2R2WjBsRFFXZGhWelV3U1Vkck4wTm5iMmRKUTBGbllWTkJPVWxFUVRkRGFVRm5TVU5DY1VsRU1HZE5SSE5MU1VOQlowbElaRzloVjNoc1NVTm9lbVJJU21KaFZqQndTVWh6UzBsRFFXZEpRMEZuU1VOQ2NGcHBRVzlqTTFKNVZ6SnNaRWxFTURsSlEyTm5TbmxCYlVwcFFucGtTRXBpWVZOQmNrbEVSbVJKUkRRNVNVUk5la2xEV1cxSlNFNHdZMngwY0VsRGMyZE5WakJuVUVRd1owMVVTVEpMVVc5blNVTkJaMGxEUVdkSlEwRm5TVU5DY1VsRU1HZGhVMEZ5U1VSRk4wTnBRV2RKUTBGblNVTkJaMkZUYzNKUGQyOW5TVU5CWjJaUmIyZEpRMEZuWkRKb2NHSkhWV2RMU0U0d1kyeDBjVmhUUVN0UVUwRjZUWGxCYlVwcFFucGtTRXBpWVd3d1oxQkVNR2ROVkVrelMxTkNOME5wUVdkSlEwRm5TVU5CWjJRelNuQmtSMVZ2VFZOM1owcHVUakJqYkhSeFdGTjNaMDFUYXpkRGFVRm5TVU5CWjBsRFFXZGhhWE55VDNkdlowbERRV2RtVVc5blNVTkJaMlF6U25Ca1IxVnZUVk4zWjBsc2VIVkphWGRuVFZOck4wTnVNRXNpTENBaVkyOXljbVZqY3k5b2FXUmxiblJtTDJocFpHVnVkR1l1WXlJNklDSkpNbXgxV1RKNE1WcEhWV2RRU0U0d1drZHNka3h0Wnl0RGFVNXdZbTFPYzJSWFVteEpSSGd4WW0xc2VtUkhVWFZoUkRSTFEyMXNkV1JEUW5Cak1UbHdZbXc1ZW1SSVNXOVpNbWhvWTJsQmNXTXpVbmxNUTBKcVlVZEdlVWxJVW5aWU1scHdZbTFSY0VOdWMwdEpRMEZuU1Vkc2RXUkRRbkJKUkRCblRGUkZOME5uYjJkSlEwRm5aREpvY0dKSFZXZExTRTR3WTJ4emNrc3liR1JMVVc5blNVTkJaMGxEUVdkSlIyeHRTVU5vZW1SSVNtSmhWakJuVUZRd1oyUkhPV1phYld4MVdrTnJTMGxEUVdkSlEwRm5TVU5CWjBsRFFXZGpiVll3WkZoS2RVbERaM2hMVkhOTFNVTkJaMGxJU214a1NGWjVZbWxCYjAxRGF6ZERiakJMUTIxc2RXUkRRbTloVjFKc1ltNVNiVXRIVG05WldFbG5TMjVOZUV4RFFtcGhSMFo1U1VOd2VrMXBhMHRsZDI5blNVTkJaMkZYTlRCSlIydG5VRk5CZEUxVWMwdEpRMEZuU1Vkc2RXUkRRbkZKUkRCblRVUnpTME5wUVdkSlEwSXpZVWRzYzFwVFFXOWpla3BpUzNsMGNGaFRhMmRsZDI5blNVTkJaMGxEUVdkSlIyeHRTVU5vY0dNeE9YQmliRGw2WkVoSmIyTjZSWE5KU0UxNVZ6SnNaRXRUYTB0SlEwRm5TVU5CWjBsRFFXZEpRMEZuWVdsemNrOTNiMmRKUTBGblNVTkJaMGxIYkcxSlEyZG9ZM3BHWW1Gc01IQkRhVUZuU1VOQlowbERRV2RKUTBGblNVaEtiR1JJVm5saWFVRjRUM2R2WjBsRFFXZG1VVzluU1VOQloyTnRWakJrV0VwMVNVTm5kMHRVYzB0bVVXODlJaXdnSW1OdmNuSmxZM012Y205MFh6UXlMM0p2ZEY4ME1pNWpJam9nSWtreWJIVlpNbmd4V2tkVloxQklWblZoV0U0d1drTTFiMUJuYjB0a2JUbHdXa05DZEdWV09YZGtXRkpxWVVkR2VVdEhUbTlaV0VsbldYbHJTMlYzYjJkSlEwRm5aRE5LY0dSSFZXOU5VM2RuU20xTmMwbEVSWEJQZDNBNVEyZHdNbUl5Ykd0SlNFcDJaRVk0TUUxcGFHcGhSMFo1U1VOd2VtUklTWEJEYm5OTFNVTkJaMGxIVG05WldFbG5TMjVOWjFCVFFXbFpWMHBxV2tkV2JWb3lhSEJoYlhSellsYzFkbU5JUm5sak0xSXhaRzVrTkdWWWIybFBkMjluU1VOQloxa3lhR2hqYVVJd1lsaEJOME5wUVdkSlEwSndZbTVSWjJGVFFUbEpRekI0VDNkdlMwbERRV2RKU0dSdllWZDRiRWxEYUhwa1NFcGlTM2wwY0ZoVGEyZGxkMjluU1VOQlowbERRV2RKU0ZKMFkwTkJPVWxJVGpCamJIUndXRlJ6UzBsRFFXZEpRMEZuU1VOQ2NGcHBRVzlrUnpGM1NVUTBPVWxEWkdoS2VVRnRTbWxDTUdKWVFXZFFSREJuU2pOdmJrdFRRamREYVVGblNVTkJaMGxEUVdkSlEwRm5TVWhTZEdORFFYSlFVMEV3VFdwelMwbERRV2RKUTBGblNVTkJaMGxEUVdka1J6RjNTVU13T1VsRFpHaEtlbk5MU1VOQlowbERRV2RKUTBGblNVTkJaMkpZYkdaalNGWXdXVEpvYUdOcGFIcFhlV2h3WW01UmNHUkhNWGRKUTFWblRXcGFaRXRVYzB0SlEwRm5TVU5CWjBsRFFqbEpSMVp6WXpKVloyRlhXV2RMU0ZKMFkwTkJLMUJUUVc1UlUyTm5TbWxaWjJSSE1YZEpSSGM1U1VOa1lVcDVhMmRsZDI5blNVTkJaMGxEUVdkSlEwRm5TVU5DTUdKWVFXZExlakJuVGtSSk4wTnBRV2RKUTBGblNVTkJaMGxEUVdkSlNGSjBZME5CZEZCVFFXNVJVMk0zUTJsQlowbERRV2RKUTBGblNVTkJaMGxITVRWWU0wSXhaRWRPYjFsWVNXOWpNWE52WVZjMU1FdFlVblJqUTBGc1NVUkpNbGhUUVhSSlJFMTVTMVJ6UzBsRFFXZEpRMEZuU1VOQ09VbEhWbk5qTWxWTFNVTkJaMGxEUVdkSlEwRm5TVU5CWjJKWWJHWmpTRll3V1RKb2FHTnBhREJpV0VGd1QzZHZaMGxEUVdkbVVYQTVRMmM5UFNJc0lDSmpiM0p5WldOekwzSmxjR1ZoZEY5aGJIQm9ZUzl5WlhCbFlYUmZZV3h3YUdFdVl5STZJQ0pKTW14MVdUSjRNVnBIVldkUVNGWjFZVmhPTUZwRE5XOVFaMjlMWkcwNWNGcERRblJsVmpsM1pGaFNhbUZIUm5sTFIwNXZXVmhKWjFsNWEwdGxkMjluU1VOQloyUXpTbkJrUjFWdlRWTjNaMHB0VFhOSlJFVndUM2R3T1VObmNESmlNbXhyU1VoS2JHTkhWbWhrUmpsb1lraENiMWxUYUdwaFIwWjVTVU53ZW1SSVNYQkRibk5MU1VOQlowbEhiSFZrUTBKd1NVUXdaMHhVUlRkRGFVRm5TVU5DY0dKdVVXZGhhVUU1U1VNd2VFOTNiMHRKUTBGblNVaGtiMkZYZUd4SlEyaDZaRWhLWWt0NWRIQllVMnRuWlhkdlowbERRV2RKUTBGblNVZHZaMUJUUVhSTlZITkxTVU5CWjBsRFFXZEpRMEp3V21sQmIyTXpVbmxYTW14a1NVUTBPVWxEWkdoS2VVRnRTbWxDZW1SSVNtSmhWakJuVUVRd1owb3piMjVMVTBJM1EybEJaMGxEUVdkSlEwRm5TVU5CWjBsSVpHOWhWM2hzU1VObmNrc3liMmRRUTBKNlpFaEtZbUZXTUdkTVUwRnVXVk5qWjB0NVFYaExVVzluU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkaVdHeG1ZMGhXTUZreWFHaGphV2g2WkVoS1ltRldNSEJQZDI5blNVTkJaMGxEUVdkSlNEQm5XbGQ0ZWxwVFFuQmFhVUZ2WXpOU2VWY3liR1JKUkRRNVNVTmtRa3A1UVcxS2FVSjZaRWhLWW1GV01HZFFSREJuU2pGdmJrdFRRamREYVVGblNVTkJaMGxEUVdkSlEwRm5TVWhrYjJGWGVHeEpRMmR5U3pKdloxQkRRbnBrU0VwaVlWWXdaMHhUUVc1UlUyTm5TM2xCZUV0UmIyZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMkpZYkdaalNGWXdXVEpvYUdOcGFIcGtTRXBpWVZZd2NFOTNiMmRKUTBGblNVTkJaMGxJTUdkYVYzaDZXbEZ2WjBsRFFXZEpRMEZuU1VOQlowbERRblJsVmpsM1pGaFNhbUZIUm5sTFNFNHdZMngwY0ZoVGF6ZERhVUZuU1VOQ09VTnBRV2RKUTBKMFpWWTVkMlJZVW1waFIwWjVTME5rWTJKcFkzQlBkM0E1UTJjOVBTSXNJQ0pqYjNKeVpXTnpMM0psZG1Gc2NHaGhMM0psZG1Gc2NHaGhMbU1pT2lBaVNUSnNkVmt5ZURGYVIxVm5VRWhXZFdGWVRqQmFRelZ2VUdkdlMyUnRPWEJhUTBKNVdsaGFhR0pJUW05WlUyZ3lZakpzYTB0UmNEZERhVUZuU1VOQ00yTnRiREJhVTJkNFRFTkJhV1ZzYkRSV00xcFdaRVpPZVZWWVFsQmlhekZ6VXpKd1NtRkZaRzFTVjFKRVdXdEdZMkpwU1hOSlJFa3pTMVJ6UzJaUlBUMGlMQ0FpWTI5eWNtVmpjeTl0ZVY5dVlXMWxMMjE1WDI1aGJXVXVZeUk2SUNKSk1teDFXVEo0TVZwSFZXZFFTRloxWVZoT01GcEROVzlRWjI5TFpHMDVjRnBEUW5SbFZqbDFXVmN4YkV0SVduWmhWMUZ3UTI1elMwbERRV2RKU0dSNVlWaFNiRXRFUlhOSlEwcEpXbGQ0YzJKNWQyZFdNamw1WWtkUmFGaEhOR2xNUTBGNFRrTnJOME51TUQwaUxDQWlZMjl5Y21WamN5OXlYMk5oY0dsMFlXeHBlbVV2Y2w5allYQnBkR0ZzYVhwbExtTWlPaUFpU1RKc2RWa3llREZhUjFWblVFaFdkV0ZZVGpCYVF6VnZVR2R2UzJSdE9YQmFRMEowWlZZNWQyUllVbnBrU0VsdldUSm9hR05wUVhGak0xSjVTMUZ3TjBOcFFXZEpRMEp3WW01UloyRlVjMHREYVVGblNVTkNjRWxFTUdkTVZFVTNRMmxCWjBsRFFqTmhSMnh6V2xOQmIyTXpVbmxYZVhOeVlWWXdjRU5wUVdkSlEwRm5TVU5CWjJRelNuQmtSMVZ2VFZOM1owcHVUakJqYkhSd1dGTjNaMDFUYXpkRGJqQkxRMjVhZG1GWFVXZGlXR3htWXpOU2VWa3lSbmRoV0ZKb1lrZHNObHBUYUdwaFIwWjVTVU53ZW1SSVNYQkRibk5MU1VOQlowbEhiSFZrUTBKd1NVUXdaMDFFYzB0RGFVRm5TVU5DY0ZwcFFXOWpNMUo1VnpKc1pFbEVORGxKUTJSb1NubEJiVXBwUVc1bGFXTm5VR293WjJNelVubFhNbXhrUzFGdlowbERRV2RKUTBGblNVaE9NR05zZEhCWVUwRjBVRk5CZWsxcWMwdEpRMEZuU1Voa2IyRlhlR3hKUTJoNlpFaEtZa3Q1ZEhCWVUydG5aWGR2WjBsRFFXZEpRMEZuU1Vkc2JVbERhSHBrU0VwaVlWWXdaMUJxTUdkS01FVnVTVU5aYlVsRFpHRktlVUVyVUZOQ2VtUklTbUpoVmpCd1EybEJaMGxEUVdkSlEwRm5TVU5CWjBsSVRqQmpiSFJ3V0ZOQmNsQlRRWHBOYW5OTFNVTkJaMGxEUVdkSlEwSndXbWxCYjB0SVRqQmpiSFJ3V0ZOQksxQlRRVzVaVTJOblNtbFpaMG96YjI1SlJEUTVTVWhPTUdOc2RIQllVMnRuU21sWlMwbERRV2RKUTBGblNVTkJiMk16VW5sWE1tdG5URk5CZUZoVFFUbFFVMEZ1U1VOaloyWklkMmRqTTFKNVZ6SnJaMHhUUVhoWVUwRTVVRk5CYmxoSVVXNUxVMnRMU1VOQlowbERRV2RKUTBGblNVTkJaMk16VW5sWE1teGtTVU13T1VsRVRYbFBkMjluU1VOQloyWlJiMmRKUTBGbllsaHNabU5JVmpCak0xSjVTMGhPTUdOcGF6ZERiakJMUTI1YWRtRlhVV2RpV0d4bVkydzVlbVJJU21wWldFSndaRWRHYzJGWWNHeExSMDV2V1ZoSlowdHVUakJqYVd0TFpYZHZaMGxEUVdkaFZ6VXdTVWRyWjFCVFFYUk5WSE5MUTJsQlowbERRak5oUjJ4eldsTkJiMk16VW5sWGVYTnlZVll3Y0VsSWMwdEpRMEZuU1VOQlowbERRbkJhYVVGdll6TlNlVmN5YkdSSlJEUTVTVU5rUWtwNVFXMUthVUo2WkVoS1ltRldNR2RRUkRCblNqRnZia3RSYjJkSlEwRm5TVU5CWjBsRFFXZEpRMEo2WkVoS1ltRldNR2RMZWpCblRYcEpOME5wUVdkSlEwRm5TVU5CWjJGWFdXZExRMmg2WkVoS1ltRldNR2RRYWpCblNqSkZia2xEV1cxSlNFNHdZMngwY0ZoVFFUaFFVMEZ1WldsamNFbERXVzFEYVVGblNVTkJaMGxEUVdkTFNFNHdZMngwY0VsRGMyZE5WakJuVUZRd1owcDVRVzVKU0hnNFNVaE9NR05zZEhCSlEzTm5UVll3WjFCVU1HZEtNWGd3U25sQ09HWkRRbnBrU0VwaVlWTkJja2xFUm1SSlJEQTVTVU5rWTAxRFkzQkxVVzluU1VOQlowbERRV2RKUTBGblNVTkNlbVJJU21KaFZqQm5URlF3WjAxNlNUZERhVUZuU1VOQ09VTnBRV2RKUTBKMFpWWTVkMlJZVW5wa1NFbHZZek5TZVV0VWMwdG1VVzlMWkcwNWNGcERRbmxZTWs1b1kwZHNNRmxYZUhCbGJWVnZXVEpvYUdOcFFYRmpNMUo1VEVOQ2NHSnVVV2RpTTBwcldsaEpjRU51YzB0SlEwRm5TVWRzYlVsRGFIWmpiVkpzWTJsQk9WQlRRWGRMVVc5blNVTkJaMGxEUVdkSlJ6RTFXRE5PTUdOdFRtaGpSMnd3V1ZkNGNHVnRWVzlqTTFKNVMxUnpTMGxEUVdkSlIxWnpZekpWWjJGWFdXZExSemw1V2tkV2VVbEVNRGxKUkVWd1EybEJaMGxEUVdkSlEwRm5ZbGhzWm1Oc09YcGtTRXBxV1ZoQ2NHUkhSbk5oV0hCc1MwaE9NR05wYXpkRGFVRm5TVU5DYkdKSVRteERhVUZuU1VOQlowbERRV2RrTTBwd1pFZFZiMDFUZDJkSmJIaDFTV2wzWjAxVGF6ZERiakJMSWl3Z0ltTnZjbkpsWTNNdmNHZGpaQzl3WjJOa0xtTWlPaUFpU1RKc2RWa3llREZhUjFWblVFaE9NRnBIYkhaTWJXY3JRMmR3Y0dKdVVXZGpSMlJxV2tOb2NHSnVVV2RpYlVsNFRFTkNjR0p1VVdkaWJVbDVTMUZ3TjBOcFFXZEpRMEp3V21sQmIySnRTWGhKUkhjNVNVUkJaMlpJZDJkaWJVbDVTVVIzT1VsRVFYQkpTSE5MU1VOQlowbERRV2RKUTBKNVdsaFNNV050TkdkTVZFVTNRMmxCWjBsRFFqbERhVUZuU1VOQ00yRkhiSE5hVTBGdlltMUplRWxEUlRsSlJ6VnBUV2xyWjJWM2IyZEpRMEZuU1VOQlowbEhiRzFKUTJoMVdXcEZaMUJwUW5WWmFrbHdRMmxCWjBsRFFXZEpRMEZuU1VOQlowbEhOV2xOVTBGMFVGTkNkVmxxU1RkRGFVRm5TVU5CWjBsRFFXZGFWM2g2V2xGdlowbERRV2RKUTBGblNVTkJaMGxEUW5WWmFrbG5URlF3WjJKdFNYaFBkMjluU1VOQloyWlJiMmRKUTBGblkyMVdNR1JZU25WSlEyaDFXV3BGY0U5M2NEa2lMQ0FpWTI5eWNtVmpjeTloYkdGdVpISnZhWFF2WVd4aGJtUnliMmwwTG1NaU9pQWlTVEpzZFZreWVERmFSMVZuVUVoV2RXRllUakJhUXpWdlVHZHZTMk16VW1oa1IyeHFTVWRzZFdSRFFuUmxWamw2WkVoS2MxcFhORzlaTW1ob1kybEJjV016VW5sTFVYQTNRMmxCWjBsRFFuQmlibEZuWVZOQk9VbEVRVGREYVVGblNVTkNNMkZIYkhOYVUwRnZZek5TZVZjeWJHUkpRMFU1U1VOa1kwMURZM0JEYVVGblNVTkJaMGxEUVdkaFUzTnlUM2R2WjBsRFFXZGpiVll3WkZoS2RVbEhhemREYmpCTFEyNWFkbUZYVVdkWlYzaG9ZbTFTZVdJeWJEQkxSMDV2V1ZoSlowdHVUakJqYVd0TFpYZHZaMGxEUVdka00wcHdaRWRWYjAxVGQyZGpNMUo1VEVOQ2RHVldPWHBrU0VweldsYzBiMk16VW5sTFUyczNRMjR3UFNJc0lDSmpiM0p5WldOekwyWndjbWx0WlM5bWNISnBiV1V1WXlJNklDSkpNbXgxV1RKNE1WcEhWV2RKYmxaMVlWaE9NRnBETlc5SloyOXFZVmMxYW1KSVZtdGFVMEU0WXpOU2EyRlhPSFZoUkRSTFEyNWFkbUZYVVdkaVdHeG1ZMGhXTUZreWFHaGphV2hxWVVkR2VVbEhUWEJEYm5OTFNVTkJaMGxJWkhsaFdGSnNTMFJGYzBsRFdtcE1RMEY0UzFSelMyWlJiMHRrYlRsd1drTkNkR1ZXT1hka1dGSjFXVzVKYjJGWE5UQkpSelZwUzFGd04wTnBRV2RKUTBKd1dtbEJiMkp0U1dkUVEwRjNTMU5DTjBOcFFXZEpRMEZuU1VOQloySlliR1pqU0ZZd1dUSm9hR05wWjI1TVUyTndUM2R2WjBsRFFXZEpRMEZuU1VjMWFVbEVNR2RNVnpWcFQzZHZaMGxEUVdkbVVXOW5TVU5CWjJGWFdXZExSelZwU1VRME9VbEVSWGRMVTBJM1EybEJaMGxEUVdkSlEwRm5ZbGhzWm1OSVZqQmliVXA1UzBjMWFVbERPR2ROVkVGd1QzZHZaMGxEUVdkbVVXOW5TVU5CWjJKWWJHWmpTRll3V1RKb2FHTnBhSFZaYVVGc1NVUkZkMGxEYzJkS2VrRnVTMVJ6UzJaUmIwdGtiVGx3V2tOQ2JXTklTbkJpVjFWdllWYzFNRWxITldsTFVYQTNRMmxCWjBsRFFuQmlibEZuV2tkc01rbEVNR2ROYW5OTFNVTkJaMGxIYkhWa1EwSnRTVVF3WjAxRWMwdERhVUZuU1VOQ2NGcHBRVzlpYlVsblVFUXdaMDFUYTJkbGQyOW5TVU5CWjBsRFFXZEpSekUxV0ROQ01XUkhOV2xqYVdoMVdXbHJOME5wUVdkSlEwRm5TVU5CWjJOdFZqQmtXRXAxVDNkdlowbERRV2RtVVc5blNVTkJaMlF5YUhCaVIxVm5TMGMxYVVsRFJUbEpSRVZ3U1VoelMwbERRV2RKUTBGblNVTkNjRnBwUVc5aWJVbG5TbE5DYTJGWVdXZFFWREJuVFVOcloyVjNiMmRKUTBGblNVTkJaMGxEUVdkSlEwSndXbWxCYjFwcFFXaFFVMEYzUzFGdlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5aRE5LY0dSSFZXOU5VM2RuU1dsdmFVeERRWGhMVkhOTFNVTkJaMGxEUVdkSlEwRm5TVU5CWjJKWWJHWmpTRll3WW0xS2VVdEhVbkJrYVdzM1EybEJaMGxEUVdkSlEwRm5TVU5CWjBsSE5XbEpSREJuWW0xSloweDVRbXRoV0ZrM1EybEJaMGxEUVdkSlEwRm5TVU5CWjBsSFVuQmthVUU1U1VSSk4wTnBRV2RKUTBGblNVTkJaMGxEUVdkSlIxbHlTM3B6UzBsRFFXZEpRMEZuU1VOQ09VbEhWbk5qTWxWTFNVTkJaMGxEUVdkSlEwRm5TVU5CWjFwSGJESkxlWE0zUTJsQlowbERRamxEYVVGblNVTkNNMk50YkRCYVUyZDRURU5CYVZoSE5HbE1RMEY0UzFSelMyWlJiejBpTENBaWJXRnBibk12YkdGemRGOTNiM0prTG1NaU9pQWlTVEpzZFZreWVERmFSMVZuVUVoT01GcEhiSFpNYldjclEybE9jR0p0VG5Oa1YxSnNTVVI0TVdKdGJIcGtSMUYxWVVRMFMwTnVXblpoVjFGbllrZEdlbVJHT1ROaU0wcHJTMGRPYjFsWVNXZExiazR3WTJsck4wTm5jREppTW14clNVY3hOVmd6UWpGa1NFNHdZMnc1UjFReFNsVlNWazVWVTFVMVNFdEhUbTlaV0VsblMyNU5jRU51YzB0SlEwRm5TVWRzZFdSRFFuQkpSREJuVEZSRk4wTm5iMmRKUTBGblpESm9jR0pIVldkTFNFNWlTM2wwY0ZoVGEwdEpRMEZuU1VOQlowbERRak5qYld3d1dsTm5lRXhEUVcxak1YUndXRk4zWjAxVGF6ZERiakJMUTI1YWRtRlhVV2RpYlZZellrZHNkVnBUYURKaU1teHJTMUZ3TjBOcFFXZEpRMEl6WTIxc01GcFRaM2hNUTBGcFdFYzBhVXhEUVhoTFZITkxabEZ2UzJGWE5UQkpSekZvWVZjMGIyRlhOVEJKUjBaNVdqSk5jMGxIVG05WldFbG5TMjFHZVZveldtSllVMnRMWlhkdlowbERRV2RpV0d4bVkwaFdNR016VW5sWU1GcFFWV3hTUmxVeFVrcFVhMk52U1dsU1lsVXliSFJqUjNoc1dGTlZhVXRVYzB0SlEwRm5TVWQ0YUdNelVtWmtNamw1V2tObmFWTkhWbk5pUnpoblZqSTVlV0pIVVdsTFZITkxRMmxCWjBsRFFuUmxWamwzWkZoU2VtUklTbVpTYXpsVFZrVldWRlpGYkU5U2VXZHBTa1owVUdKdGVEVkpSemwxV2xOQ00ySXpTbXRZVTFWcFMxUnpTMGxEUVdkSlIzaG9Zek5TWm1ReU9YbGFRMmRwVTBkV2MySkhPV1pXTWpsNVlrZFJhRWxwYXpkRFoyOW5TVU5CWjJKWWJHWmpTRll3WXpOU2VWZ3dXbEJWYkZKR1ZURlNTbFJyWTI5SmFWSmlWRWM1TUdONVFuWmFhVUl6WWpOS2EyTXhNR3hKYVdzM1EybEJaMGxEUW5OWldFNHdXRE5rZG1OdFVXOURhVUZuU1VOQmFWTkhWbk5pUnpsbVZqSTVlV0pIVVdoSlJrNUNWRVpXVlVsRmVFWlZlVUpWVWxWemQwbEZjRVpWTVVKR1ZXdFZaMVZXVmtaSlJVNUdWa1pTUmtsRmNGQldWa3BQVWxWVloxVnJPVlpVUlZWblZHczVVMVJWYkU5U1ZsRnBTMVJ6UzBOcFFXZEpRMEowWlZZNWQyUllVbnBrU0VwbVVtczVVMVpGVmxSV1JXeFBVbmxuYVVwR2RGVlpWMHA2U1VkR2RWcERRbnBqUjBacVdsaE5aMk16VW5sYVdFNTZTVWhTYkdNelVtUktVMGx3VDNkdlowbERRV2RpUjBaNlpFWTVNMkl6U210TFEwcEpXbGQ0YzJJeGVEQldNamw1WWtkUmFFbHBhemREWjI5blNVTkJaMkpZYkdaalNGWXdZek5TZVZnd1dsQlZiRkpHVlRGU1NsUnJZMjlKYVZKaVZrZEdhV041UW1oaWJWRm5Zek5DYUZreVZucEpTRTR3WTIxV2VtTjVRakJhV0U0d1NVZEdNRWxJVW05YVUwSnNZbTFSWjJSSE9YWllVMVZwUzFSelMwbERRV2RKUjNob1l6TlNabVF5T1hsYVEyZHBVMGRXYzJKSE9XTmtSbVIyWTIxNGEwbFRRbXBoUjJ4c1ltbENhbUZIUmpCSlJWVjBVVlpLVlZVeFZsRkpSVEZDVkd0a1JsVnBRbUZSVm05blVsWlJaMVpyUmxkUlZrcEtVbFpKWjBsRFFXZEpRMEZuU1dkdlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwbG5TVU5DWTJSR2VEQllTRkZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjA1VFFXZEpRMEZuU1VOQ1kyUkdlREJZU0ZKalpFTkJaMGxEUVdkSlEwbHdUM2R2UzBsRFFXZEpSekUxV0ROQ01XUklUakJqYkRsSFZERktWVkpXVGxWVFZUVklTME5KYTFjd1ZuUmpTRkkxV0ZOVmFVdFVjMHRKUTBGblNVZDRhR016VW1aa01qbDVXa05uYVVscGF6ZERhVUZuU1VOQ2VWcFlVakZqYlRSblRVUnpTMlpSYnowaUxDQWliV0ZwYm5NdlkyOTFiblJ2WXk1aklqb2dJa2t5YkhWWk1uZ3hXa2RWWjFCSVRqQmFSMngyVEcxbkswTnBUbkJpYlU1elpGZFNiRWxFZURGaWJXeDZaRWRSZFdGRU5FdERiV3gxWkVOQ2FtSXpWblZrUnpscVMwZE9iMWxZU1dkTGJrNHdZMmwzWjFreWFHaGphVUl3WWpFNWJXRlhOV3RMVkhOTFEyNWFkbUZYVVdkaVdHeG1ZMGhXTUZreWFHaGphV2hxWVVkR2VVbEhUWEJEYm5OTFNVTkJaMGxJWkhsaFdGSnNTMFJGYzBsRFdtcE1RMEY0UzFSelMyWlJiMHRrYlRsd1drTkNkR1ZXT1hka1dGSjFXVzVKYjJGWE5UQkpSelZwUzFGd04wTnBRV2RKUTBKd1dtbEJiMkp0U1dkUVEwRjNTMU5DTjBOcFFXZEpRMEZuU1VOQloySlliR1pqU0ZZd1dUSm9hR05wWjI1TVUyTndUM2R2WjBsRFFXZEpRMEZuU1VjMWFVbEVNR2RNVnpWcFQzZHZaMGxEUVdkbVVXOW5TVU5CWjJGWFdXZExSelZwU1VRME9VbEVSWGRMVTBJM1EybEJaMGxEUVdkSlEwRm5ZbGhzWm1OSVZqQmliVXA1UzBjMWFVbERPR2ROVkVGd1QzZHZaMGxEUVdkbVVXOW5TVU5CWjJKWWJHWmpTRll3V1RKb2FHTnBhSFZaYVVGc1NVUkZkMGxEYzJkS2VrRnVTMVJ6UzJaUmIwdGtiVGx3V2tOQ2RHVldPWGRrV0ZKNlpFaEtabEpyT1ZOV1JWWlVWa1ZzVDFKNWFHcGhSMFo1U1VOd2VrdFJjRGREYVVGblNVTkNjR0p1VVdkaFUwRTVTVU13ZUU5M2IwdEpRMEZuU1Voa2IyRlhlR3hKUTJoNlYzbHpjbUZXTUhCRGFVRm5TVU5CWjBsRFFXZGtNMHB3WkVkVmIwMVRkMmRLYms1aVlWWXdjMGxFUlhCUGQzQTVRMmR3TW1JeWJHdEpSelZzWkRKNGNHSnRWVzlrYlRsd1drTnJTMlYzYjJkSlEwRm5aRE5LY0dSSFZXOU5VM2RuU1d4NGRVbHBkMmROVTJzM1EyNHdTME50YkhWa1EwSjBXVmRzZFV0SGJIVmtRMEpvWTIxa2FreERRbXBoUjBaNVNVTndhR050WkRKWE1UQndRMjV6UzBsRFFXZEpSMngxWkVOQ2VWcFlVV2RRVTBGM1QzZHZTMGxEUVdkSlJ6RTFXRE5DTVdSSVRqQmpiRGxIVkRGS1ZWSldUbFZUVlRWSVMwTkphMWN3U21oak1teHFXRk5WYVV0VWMwdEpRMEZuU1VoS2JHUkRRVGxKUjA1MlpGYzFNR0l5VFc5SmExWlJVMVpTUmxFd1oybE1RMEZ1VWxOamNFOTNiMmRKUTBGbllsaHNabU5JVmpCaWJVcDVTMGhLYkdSRGF6ZERhVUZuU1VOQ2RWcFlaSE5oVnpWc1MwTnJOME5uYjJkSlEwRm5ZbGhzWm1OSVZqQmpNMUo1V0RCYVVGVnNVa1pWTVZKS1ZHdGpiMGxwVW1KUlYxSXlXVmMxYWxwWFVtUktVMGx3VDNkdlowbERRV2RqYlZZd1NVUXdaMWt5T1RGaWJsSjJXWGxuUzBsRFFXZEpRMHBVVVZWNFZsWkRRazFTVTBKRVZEQlNSVk5WTlVoSlJVNU5WbFZKWjFSVk9VcEpSVVpXVTJzNVZsVnJVa2xXVld0blVUQkZaMVpyUldkVlJYaFdWa1U1VlVsRlNrcFNWVFJuVTJ0R1NrbEZUbEJTUlZWblZFVkZaMVJWT1ZaVVJXdG5TV2R2WjBsRFFXZEpiRkpRVmxaU1JrbEZlRUpWUmtwR1ZYbENUbE5WVWtwSlJWWlZTVVZ3UmxFeFNrcFZlVUpHVkdsQ1RsRlZSa0pSVlhCTFUyeFdWRlY1UWtSSlJsVm5WRU5DUmtsR1RXbE1RVzluU1VOQlowcDVRVzVMVkhOTFNVTkJaMGxITVRWWU0wSXhaRWMxYVdOcGFIbGFXRkZ3VDNkdlowbERRV2RpYlZZellrZHNkVnBUWjNCUGQyOUxTVU5CWjBsSE1UVllNMEl4WkVoT01HTnNPVWRVTVVwVlVsWk9WVk5WTlVoTFEwbHJWekJPZG1SWE5UQkpSMVl5V2xoS05XUkhhSEJpYldSa1NsTkpjRTkzYjJkSlEwRm5ZMjFXTUVsRU1HZFpNamt4WW01U2RsbDVaMmxNYVRSMVRHazBkVXhwTkhWTWFUUjFUR2swYVV4RFFXNU1hV053VDNkdlowbERRV2RpV0d4bVkwaFdNR0p0U25sTFNFcHNaRU5yTjBOcFFXZEpRMEoxV2xoa2MyRlhOV3hMUTJzM1EyZHZaMGxEUVdkaVdHeG1ZMGhXTUdNelVubFlNRnBRVld4U1JsVXhVa3BVYTJOdlNXbFNZbFJ0T1RCaFIyeDFXbmxDTUdKNVFtcGlNMVoxWkVZd2JFbHBhemREYVVGblNVTkNlVnBZVVdkUVUwSnFZak5XZFdSSE9XcExRMHBHVlVWc1ZWSlZUa2xKYVhkblNucGpia3RVYzB0SlEwRm5TVWN4TlZnelFqRmtSelZwWTJsb2VWcFlVWEJQZDI5blNVTkJaMkp0VmpOaVIyeDFXbE5uY0U5M2IwdEpRMEZuU1VjeE5WZ3pRakZrU0U0d1kydzVSMVF4U2xWU1ZrNVZVMVUxU0V0RFNXdFhNRGwxWWtocloySXlOV3hKUjJ4MVNVZEZaMk15Vm1oSlJ6bHRTVWRLTVdKSGVIcGhSMnd3V0ZOVmFVdFVjMHRKUTBGblNVaEtiR1JEUVRsSlIwNTJaRmMxTUdJeVRXOUpiVVo2V2tkV00xcHVSak5hVjFwNFpESldiV05YVmpOYWFrVXhUbGhrYkZwcVZteGtlbFV5V201a2JGcHFVbXhrZWxadFRWaGtiRTVYV1hoa01sWnRaRlJzYVZwdVJqTmpTR3h0U1dkdlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CYVZveVNtOWpibXg0WkhsYU1WbHRXblpsV0dSc1dXMWFkbU5YVmpObFYwcHRZMWhzTTFwdVJqTmFWMXA0V2xoa2JVNTZaekZOVkZadFpIcEJhVXhCYjJkSlEwRm5TbmxaYmt0VWMwdEpRMEZuU1VjeE5WZ3pRakZrUnpWcFkybG9lVnBZVVhCUGQyOW5TVU5CWjJKdFZqTmlSMngxV2xObmNFOTNiMmRKUTBGblkyMVdNR1JZU25WSlJFRTNRMjR3U3lJc0lDSnRZV2x1Y3k5a2FXZHBkSE11WXlJNklDSkpNbXgxV1RKNE1WcEhWV2RRU0U0d1drZHNka3h0Wnl0RGFVNXdZbTFPYzJSWFVteEpSSGd4WW0xc2VtUkhVWFZoUkRSTFEyNWFkbUZYVVdkYVIyeHVZVmhTZWt0SVduWmhWMUZ3VDNkdlMyUnRPWEJhUTBKMFpWWTVkMlJZVW5wa1NFcG1VbXM1VTFaRlZsUldSV3hQVW5sb2FtRkhSbmxKUTNCNlMxRndOME5wUVdkSlEwSndZbTVSWjJGVFFUbEpRekI0VDNkdlMwbERRV2RKU0dSdllWZDRiRWxEYUhwWGVYTnlZVll3Y0VOcFFXZEpRMEZuU1VOQloyUXpTbkJrUjFWdlRWTjNaMHB1VG1KaFZqQnpTVVJGY0U5M2NEbERaM0J3WW01UloySlhSbkJpYVdod1ltNVJaMWxZU201WmVYZG5XVEpvYUdOcFFYRlpXRXB1Wkd4MFpFdFJjRGREYVVGblNVTkNkR1ZXT1hka1dGSjZaRWhLWmxKck9WTldSVlpVVmtWc1QxSjVaMmxLUm5SRFdWaE9jRmt4TUd4SmFXczNRMmxCWjBsRFFtdGhWMlJ3WkVoTmIwdFVjMHRKUTBGblNVaEtiR1JJVm5saWFVRjNUM2R3T1VOblBUMGlMQ0FpYldGcGJuTXZjbTkwWHpReUxtTWlPaUFpU1RKc2RWa3llREZhUjFWblVFaE9NRnBIYkhaTWJXY3JRMmxPY0dKdFRuTmtWMUpzU1VSNE1XSnRiSHBrUjFGMVlVUTBTME51V25aaFYxRm5ZMjA1TUZoNlVYbExSMDV2V1ZoSlowdHVUakJqYVdzM1EyZHdNbUl5Ykd0SlJ6RTFXRE5DTVdSSVRqQmpiRGxIVkRGS1ZWSldUbFZUVlRWSVMwZE9iMWxZU1dkTGJrMXdRMjV6UzBsRFFXZEpSMngxWkVOQ2NFbEVNR2RNVkVVM1EyZHZaMGxEUVdka01taHdZa2RWWjB0SVRtSkxlWFJ3V0ZOclMwbERRV2RKUTBGblNVTkNNMk50YkRCYVUyZDRURU5CYldNeGRIQllVM2RuVFZOck4wTnVNRXREYmxwMllWZFJaMkp0VmpOaVIyeDFXbE5vTW1JeWJHdExVWEEzUTJsQlowbERRak5qYld3d1dsTm5lRXhEUVdsWVJ6UnBURU5CZUV0VWMwdG1VVzlMWVZjMU1FbEhNV2hoVnpSdllWYzFNRWxIUm5sYU1rMXpTVWRPYjFsWVNXZExiVVo1V2pOYVlsaFRhMHRsZDI5blNVTkJaMkpZYkdaalNGWXdZek5TZVZnd1dsQlZiRkpHVlRGU1NsUnJZMjlKYVZKaVVWZDRjMGxIUm5OalIyaG9XVzFXTUZoVFZXbExWSE5MU1VOQlowbElTblprUmpnd1RXbG5hVmxYU21wYVIxWnRXakpvY0dGdGRITmlWelYyWTBoR2VXTXpVakZrYm1RMFpWaHZhVXRVYzB0RGFVRm5TVU5DZEdWV09YZGtXRko2WkVoS1psSnJPVk5XUlZaVVZrVnNUMUo1WjJsS1JuUlBaRmN4YVZwWVNucEpSMFoxV2tOQ2VtTkhWbXBoVjBaell6RXdiRWxwYXpkRGFVRm5TVU5DZVdJelVtWk9SRWx2U1cxYWRtTnBRbmRpTWpVMVNVUmpNVTVEUVRCUFEwRjJTV2xyTjBObmIyZEpRMEZuWWxoc1ptTklWakJqTTFKNVdEQmFVRlZzVWtaVk1WSktWR3RqYjBscFVtSlRSMFo1V2tOQ01GcFlUakJZVTFWcFMxUnpTMGxEUVdkSlNFcDJaRVk0TUUxcFoybFZhemxWVFZOQ1NWUXhTbE5UVlVwTlVsTkNSbGRGVmxOUk1HeEVVbE5DUm1OWVRtdGpNbEV6VG5wbk0wOUVhR2hsYlZJMldWUkJkMDFFUWxsUlZURlVVMFZXVFZSRFFsZFJWVFZRVmxaS1NrbERTVXRKUTBGblNVTkJaMGxEUVdkSlEwRnBVbXhXWTFoR09VMUpSWFJRU1VWU1JsVXhUbFpWZVVKT1VrVlNVMVZwUWtsUlZXaENVMFZHU1VscGF6ZERaMjluU1VOQloySlliR1pqU0ZZd1l6TlNlVmd3V2xCVmJGSkdWVEZTU2xSclkyOUphVkpqWW14MFJtSllRakJsVmpCc1NXbHJOME5wUVdkSlEwSjVZak5TWms1RVNXOUphVWx3VDNkdlMwbERRV2RKUnpFMVdETkNNV1JJVGpCamJEbEhWREZLVlZKV1RsVlRWVFZJUzBOSmExY3dOWFprUjJod1ltMWpaMlJIT0dkamJUa3dXVmhTYkZoVFZXbExWSE5MU1VOQlowbElTblprUmpnd1RXbG5hVTVFU1dsTFZITkxRMmxCWjBsRFFuUmxWamwzWkZoU2VtUklTbVpTYXpsVFZrVldWRlpGYkU5U2VXZHBTa1owUW1KSGQyZFpWelZyU1VoU2VXRlhUbkpsVmpCc1NXbHJOME5wUVdkSlEwSjVZak5TWms1RVNXOUpiVVpwV1RKU2JGcHRaRzlPUkZaQ1lWZHdjbUpITVhWT2VtYzBVRlF4VEZNeWVIWmlNa1o2V2tSek9XSXpRbmhqYms0d1pGaGFNMlZJYkRaWGFVbHdUM2R2WjBsRFFXZGpiVll3WkZoS2RVbEVRVGREYmpCTElpd2dJbTFoYVc1ekwyWndjbWx0WlM1aklqb2dJa05wVG5CaWJVNXpaRmRTYkVsRWVIcGtSMUp3WW5rMWIxQm5iMnBoVnpWcVlraFdhMXBUUVRoa1Z6VndZek5TYTB4dFp5dERaM0F5WWpKc2EwbEhXbmRqYld4MFdsTm9jR0p1VVdkaWJVbHdUM2R2UzJSdE9YQmFRMEowWlZZNWQyUllVbnBrU0VwbVVtczVVMVpGVmxSV1JXeFBVbmxvYW1GSFJubEpRM0I2UzFGd04wTnBRV2RKUTBKd1ltNVJaMkZUUVRsSlF6QjRUM2R2UzBsRFFXZEpTR1J2WVZkNGJFbERhSHBYZVhOeVlWWXdjRU5wUVdkSlEwRm5TVU5CWjJRelNuQmtSMVZ2VFZOM1owcHVUbUpoVmpCelNVUkZjRTkzY0RsRFozQXlZakpzYTBsSE5XeGtNbmh3WW0xVmIyUnRPWEJhUTJ0TFpYZHZaMGxEUVdka00wcHdaRWRWYjAxVGQyZEpiSGgxU1dsM1owMVRhemREYmpCTFEyMXNkV1JEUW5SWlYyeDFTMGRzZFdSRFFtaGpiV1JxVEVOQ2FtRkhSbmxKUTNCb1kyMWtNbGN4TUhCRGJuTkxTVU5CWjBsSE1UVllNMEl4WkVoT01HTnNPVWRVTVVwVlVsWk9WVk5WTlVoTFEwbHJWekZPTVZsdGNHeFpNMUZuWkVkV2VtUkdNR3hKYVdzM1EybEJaMGxEUW0xalNFcHdZbGRWYjAxcVNYbE9VMnMzUTJkdlowbERRV2RpV0d4bVkwaFdNR016VW5sWU1GcFFWV3hTUmxVeFVrcFVhMk52U1dsU1kySnNkRlJpVjBaellrTkNkV1JYTVdsYVdFcGtTbE5KY0U5M2IyZEpRMEZuV201Q2VXRlhNV3hMUkZFeFMxUnpTME5wUVdkSlEwSjBaVlk1ZDJSWVVucGtTRXBtVW1zNVUxWkZWbFJXUld4UFVubG5hVXBHZEZSaVYwWnpZa05DZFdSWE1XbGFXRWxuVFd3d2JFbHBhemREYVVGblNVTkNiV05JU25CaVYxVnZUMVJuY0U5M2IwdEpRMEZuU1VjeE5WZ3pRakZrU0U0d1kydzVSMVF4U2xWU1ZrNVZVMVUxU0V0RFNXdFlSelZpVVcxc2JrbEhOVEZpVjBwc1kyd3diRWxwYXpkRGFVRm5TVU5DYldOSVNuQmlWMVZ2VGtSVk1rNTZaelZMVkhOTFEybEJaMGxEUW5SbFZqbDNaRmhTZW1SSVNtWlNhemxUVmtWV1ZGWkZiRTlTZVdkcFNrWjBRMkZYWTJkaWJsWjBXVzFXZVVsRVNtUktVMGx3VDNkdlowbERRV2RhYmtKNVlWY3hiRXRFUlhoTlZFVjRUVlJGZUV0VWMwdERhVUZuU1VOQ2RHVldPWGRrV0ZKNlpFaEtabEpyT1ZOV1JWWlVWa1ZzVDFKNVoybEtSbmgxVnpCb01Wb3lWV2RpYmxaMFdXMVdlVmhUVldsTFZITkxTVU5CWjBsSFduZGpiV3gwV2xObk1VNUVVVFJPUkZVMFMxUnpTME5wUVdkSlEwSjBaVlk1ZDJSWVVucGtTRXBtVW1zNVUxWkZWbFJXUld4UFVubG5hVXBHZEVsa1YyUnNTVWMxTVdKWFNteGphVUY1V0ZOVmFVdFVjMHRKUTBGblNVZGFkMk50YkhSYVUyYzFUMFJCTTAxNlNYaExWSE5MUTJsQlowbERRblJsVmpsM1pGaFNlbVJJU21aU2F6bFRWa1ZXVkZaRmJFOVNlV2RwU2taNGRWY3hVbmxoVjA1eVpWTkJlRmhUVldsTFZITkxTVU5CWjBsSFduZGpiV3gwV2xObmVVdFVjMHREYVVGblNVTkNkR1ZXT1hka1dGSjZaRWhLWmxKck9WTldSVlpVVmtWc1QxSjVaMmxLUm5SVlkyMXNhbUV6YTJkTmJEQnNTV2xyTjBOcFFXZEpRMEp0WTBoS2NHSlhWVzlOVTJzM1EyZHZaMGxEUVdkaVdHeG1ZMGhXTUdNelVubFlNRnBRVld4U1JsVXhVa3BVYTJOdlNXbFNZMkpzZEdGYVdFcDJXRk5WYVV0VWMwdEpRMEZuU1VkYWQyTnRiSFJhVTJkM1MxUnpTME5wUVdkSlEwSjBaVlk1ZDJSWVVucGtTRXBtVW1zNVUxWkZWbFJXUld4UFVubG5hVXBHZEU5YVYyUm9aRWRzTWxwVFFqSlpWM2d4V2xZd2JFbHBhemREYVVGblNVTkNiV05JU25CaVYxVnZURlJuY0U5M2IyZEpRMEZuWTIxV01HUllTblZKUkVFM1EyNHdTeUlzSUNKdFlXbHVjeTl5WlhCbFlYUmZZV3h3YUdFdVl5STZJQ0pKTW14MVdUSjRNVnBIVldkUVNFNHdXa2RzZGt4dFp5dERhVTV3WW0xT2MyUlhVbXhKUkhneFltMXNlbVJIVVhWaFJEUkxRMjVhZG1GWFVXZGpiVlozV2xkR01GZ3lSbk5qUjJob1MwZE9iMWxZU1dkTGJrNHdZMmxyTjBObmNESmlNbXhyU1VjeE5WZ3pRakZrU0U0d1kydzVSMVF4U2xWU1ZrNVZVMVUxU0V0SFRtOVpXRWxuUzI1TmNFTnVjMHRKUTBGblNVZHNkV1JEUW5CSlJEQm5URlJGTjBObmIyZEpRMEZuWkRKb2NHSkhWV2RMU0U1aVMzbDBjRmhUYTB0SlEwRm5TVU5CWjBsRFFqTmpiV3d3V2xObmVFeERRVzFqTVhSd1dGTjNaMDFUYXpkRGJqQkxRMjVhZG1GWFVXZGliVll6WWtkc2RWcFRhREppTW14clMxRndOME5wUVdkSlEwSXpZMjFzTUZwVFozaE1RMEZwV0VjMGFVeERRWGhMVkhOTFpsRnZTMkZYTlRCSlJ6Rm9ZVmMwYjJGWE5UQkpSMFo1V2pKTmMwbEhUbTlaV0VsblMyMUdlVm96V21KWVUydExaWGR2WjBsRFFXZGlXR3htWTBoV01HTXpVbmxZTUZwUVZXeFNSbFV4VWtwVWEyTnZTV2xTWWxGdFJucGhWMDVrU2xOSmNFOTNiMmRKUTBGblkyMVdkMXBYUmpCWU1rWnpZMGRvYUV0RFNtaFpiVTFwUzFSelMwTnBRV2RKUTBKMFpWWTVkMlJZVW5wa1NFcG1VbXM1VTFaRlZsUldSV3hQVW5sbmFVcEdkRUppUjNkbldWZDRkMkZIUm1sYVdGSmtTbE5KY0U5M2IyZEpRMEZuWTIxV2QxcFhSakJZTWtaelkwZG9hRXREU21oWmJVNXJXbGRhYm1GSGJIRmhNbmgwWW0wNWQyTllTbnBrU0ZZeVpETm9OV1ZwU1hCUGQyOUxTVU5CWjBsSE1UVllNMEl4WkVoT01HTnNPVWRVTVVwVlVsWk9WVk5WTlVoTFEwbHJWekExTVdKWFNteGpiazFuV1ZjMWEwbElUbmRhVjA1d1dWZDRlbGhUVldsTFZITkxTVU5CWjBsSVNteGpSMVpvWkVZNWFHSklRbTlaVTJkcFdtMDVlVWxJUW5aaWJtdG5UbnBWTUVsRVVUUkpRemhwUzFSelMwTnBRV2RKUTBKMFpWWTVkMlJZVW5wa1NFcG1VbXM1VTFaRlZsUldSV3hQVW5sbmFVcEdlSFZYTUZaMFkwaFNOVmhUVldsTFZITkxTVU5CWjBsSVNteGpSMVpvWkVZNWFHSklRbTlaVTJkcFNXbHJOME5uYjJkSlEwRm5ZbGhzWm1OSVZqQmpNMUo1V0RCYVVGVnNVa1pWTVZKS1ZHdGpiMGxwVW1KV1NFcHdXVEowTlVsSVVteGpNMUprU2xOSmNFOTNiMmRKUTBGblkyMVdkMXBYUmpCWU1rWnpZMGRvYUV0RFNtaFpiVTVyV2xkYWJtRkVVVEZSVjJ4eFlUSjRkR0pxWXpSUFJEQTVVekIwYzJJeU9XaGpNbEUzVUZjNWQyTllTbnBrU0ZZeVpETm9OV1ZzYjJsTFZITkxTVU5CWjBsSVNteGtTRlo1WW1sQmQwOTNjRGxEWnowOUlpd2dJbTFoYVc1ekwzSmZZMkZ3YVhSaGJHbDZaUzVqSWpvZ0lra3liSFZaTW5neFdrZFZaMUJJVGpCYVIyeDJURzFuSzBOcFRuQmliVTV6WkZkU2JFbEVlSHBrUjFKellWZEpkV0ZFTkV0Sk1teDFXVEo0TVZwSFZXZFFTRloxWVZoT01GcEROVzlRWjI5TFpHMDVjRnBEUW5sWU1rNW9ZMGRzTUZsWGVIQmxiVlZ2V1RKb2FHTnBRWEZqTTFKNVRFTkNjR0p1VVdkaU0wcHJXbGhKY0U5M2IwdGtiVGx3V2tOQ2RHVldPWGRrV0ZKNlpFaEtabEpyT1ZOV1JWWlVWa1ZzVDFKNWFHcGhSMFo1U1VOd2VrdFJjRGREYVVGblNVTkNjR0p1VVdkaFUwRTVTVU13ZUU5M2IwdEpRMEZuU1Voa2IyRlhlR3hKUTJoNlYzbHpjbUZXTUhCRGFVRm5TVU5CWjBsRFFXZGtNMHB3WkVkVmIwMVRkMmRLYms1aVlWWXdjMGxFUlhCUGQzQTVRMmR3Y0dKdVVXZGlXR3htWXpOU2VXSkhWblZZTUZwUVZXeFNSbFV4VWtwVWEyTnZXVEpvYUdOcFFYRmplV3RMWlhkdlowbERRV2RoVnpVd1NVZHJaMUJUUVhkUGQyOUxTVU5CWjBsSVpHOWhWM2hzU1VOb2VsY3liR1JMVVc5blNVTkJaMGxEUVdkSlIydHlTM3B6UzBsRFFXZEpTRXBzWkVoV2VXSnBRVzloVTJzM1EyNHdTME50VG05WldFbG5TMjB4TlZnelRqQmpiVkl4WTBZNVIxUXhTbFZTVms1VlUxVTFTRXRIVG05WldFbG5TMjVOY0VOdWMwdEpRMEZuU1VkT2IxbFlTV2RMYms0d1kycHpTMGxEUVdkSlIyeDFaRU5DY0VsRU1HZE5SSE5MUTJsQlowbERRbnBrU0VsblVGTkNkRmxYZUhOaU1rMXZZekpzTmxwWE9XMUxSMDV2V1ZoSmNFbERiMmRMUnpFMVdETk9NR050ZUd4aWJEbEhWREZLVlZKV1RsVlRWVFZJUzBoTmNFbERjMmROVTJ0d1QzZHZaMGxEUVdka01taHdZa2RWWjB0SVRtSmhWakJ3U1VoelMwbERRV2RKUTBGblNVTkNlbVJJU21KaFZqQm5VRk5DZWxjeWJHUlBkMjluU1VOQlowbERRV2RKUjJ0eVMzcHpTMGxEUVdkSlNEQkxTVU5CWjBsSVRqQmpiSFJ3V0ZOQk9VbERaR05OUTJNM1EybEJaMGxEUW5sYVdGSXhZMjAwWjB0SVRqQmphV3MzUTI0d1MwTnVXblpoVjFGblltMVdNMkpIYkhWYVUyZ3lZakpzYTB0UmNEZERhVUZuU1VOQ00yTnRiREJhVTJkNFRFTkJhVmhITkdsTVEwRjRTMVJ6UzJaUmIwdGhWelV3U1VjeGFHRlhORzloVnpVd1NVZEdlVm95VFhOSlIwNXZXVmhKWjB0dFJubGFNMXBpV0ZOclMyVjNiMmRKUTBGbllsaHNabU5JVmpCak0xSjVXREJhVUZWc1VrWlZNVkpLVkd0amIwbHBVbUpVTVVwRlVsWkpaMDFEUWpoSlJVcG9ZekpzYWxoVFZXbExWSE5MU1VOQlowbElTbVpaTWtaM1lWaFNhR0pIYkRaYVUyaDBaVlk1ZW1SSVNtdGtXRUptVW1zNVUxWkZWbFJXUld4UFVubG5hV0ZIVm5OaVJ6aG5aREk1ZVdKSFVXZGtXR1F4U1dscmMwbEVRWEJQZDI5TFNVTkJaMGxITVRWWU0wSXhaRWhPTUdOc09VZFVNVXBWVWxaT1ZWTlZOVWhMUTBsclZ6QTVVMUpGVmxOSlJFRm5aa05DVUdKdFZXZGtNamw1V2tZd2JFbHBhemREYVVGblNVTkNlVmd5VG1oalIyd3dXVmQ0Y0dWdFZXOWlXR3htWXpOU2VWcElWbmRZTUZwUVZXeFNSbFV4VWtwVWEyTnZTVzFvYkdKSGVIWllNMlIyWTIxNGExZ3pWak5rVTBsd1RFTkJkMHRVYzB0RGFVRm5TVU5DZEdWV09YZGtXRko2WkVoS1psSnJPVk5XUlZaVVZrVnNUMUo1WjJsS1JuUlFWV3RTUmxWcFFYZEpTSGRuVW14V1RWUkRRa1JSVmtKVVdGTlZhVXRVYzB0SlEwRm5TVWhLWmxreVJuZGhXRkpvWWtkc05scFRaMHRKUTBGblNVY3hOVmd6VGpCamJWSXhZMFk1UjFReFNsVlNWazVWVTFVMVNFdERTbEZVTVZaVFZWWldVRk5UUWt0U1UwSkVWV3RzUmtsRlJrSlJWVVpDVVZWR1FsRlZSa0pSVlVaQ1VWVkdRa2xwYTNOSlJFRndUM2R2UzBsRFFXZEpSekUxV0ROQ01XUklUakJqYkRsSFZERktWVkpXVGxWVFZUVklTME5KYTFjd09WTlNSVlpUU1VSQloyWkRRa05oVjJObll6SldkV1JIVm5WWk1sVm5XVmMxYTBsSE5URmlWMHBzWTI1T1pFcFRTWEJQZDI5blNVTkJaMk5zT1dwWldFSndaRWRHYzJGWWNHeExSekUxV0ROT01HTnRVakZqUmpsSFZERktWVkpXVGxWVFZUVklTME5LVjFGV1drSlZhMnhHVldsQ1JsVXhVV2RVUlZWblZGVldTbFJGZUVaV1ZrbG5Wa1ZXVEUxVFFrVlNVMEpOVVZOQmFVTnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSmJGSkdWV3ByTlZWclZXZFpNa1o1U1Vkd2JFbEhkMjVaVjJ4MFdsTkNNR05wZEhaalEwSXdZMjA1ZDBsSVZqTmtVMGx3VEVGdlowbERRV2ROUTJzM1EyZHZaMGxEUVdkaVdHeG1ZMGhXTUdNelVubFlNRnBRVld4U1JsVXhVa3BVYTJOdlNXbFNZbFF4U2tWU1ZrbG5UVU5DT0VsRlZuUmpTRkkxV0ZOVmFVdFVjMHRKUTBGblNVaEtabGt5Um5kaFdGSm9Za2RzTmxwVGFIUmxWamw2WkVoS2EyUllRbVpTYXpsVFZrVldWRlpGYkU5U2VXZHBTV2xyYzBsRVFYQlBkMjlMU1VOQlowbEhNVFZZTTBJeFpFaE9NR05zT1VkVU1VcFZVbFpPVlZOVk5VaExRMGxyV0VjMVlsUXhTa1ZTVmtsblRWTkNPRWxGU21oak1teHFXRk5WYVV0VWMwdEpRMEZuU1VoS1psa3lSbmRoV0ZKb1lrZHNObHBUYUhSbFZqbDZaRWhLYTJSWVFtWlNhemxUVmtWV1ZGWkZiRTlTZVdkcFlVZFdjMkpIT0dka01qbDVZa2RSWjJSWVpERkphV3R6U1VSRmNFOTNiMHRKUTBGblNVY3hOVmd6UWpGa1NFNHdZMnc1UjFReFNsVlNWazVWVTFVMVNFdERTV3RYTURsVFVrVldVMGxFUldkbVEwSlFZbTFWWjJReU9YbGFSakJzU1dsck4wTnBRV2RKUTBKNVdESk9hR05IYkRCWlYzaHdaVzFWYjJKWWJHWmpNMUo1V2toV2QxZ3dXbEJWYkZKR1ZURlNTbFJyWTI5SmJXaHNZa2Q0ZGxnelpIWmpiWGhyV0ROV00yUlRTWEJNUTBGNFMxUnpTME5wUVdkSlEwSjBaVlk1ZDJSWVVucGtTRXBtVW1zNVUxWkZWbFJXUld4UFVubG5hVXBHZEZCVmExSkdWV2xCZUVsSWQyZFNiRlpOVkVOQ1JGRldRbFJZVTFWcFMxUnpTMGxEUVdkSlNFcG1XVEpHZDJGWVVtaGlSMncyV2xOblMwbERRV2RKUnpFMVdETk9NR050VWpGalJqbEhWREZLVlZKV1RsVlRWVFZJUzBOS1VWUXhWbE5WVmxaUVUxTkNTMUpUUWtSVmEyeEdTVVZHUWxGVlJrSlJWVVpDVVZWR1FsRlZSa0pSVlVaQ1NXbHJjMGxFUlhCUGQyOUxTVU5CWjBsSE1UVllNMEl4WkVoT01HTnNPVWRVTVVwVlVsWk9WVk5WTlVoTFEwbHJWekE1VTFKRlZsTkpSRVZuWmtOQ1EyRlhZMmRqTWxaMVpFZFdkVmt5VldkWlZ6VnJTVWMxTVdKWFNteGpiazVrU2xOSmNFOTNiMmRKUTBGblkydzVhbGxZUW5Ca1IwWnpZVmh3YkV0SE1UVllNMDR3WTIxU01XTkdPVWRVTVVwVlVsWk9WVk5WTlVoTFEwcFhVVlphUWxWcmJFWlZhVUpHVlRGUloxUkZWV2RVVlZaS1ZFVjRSbFpXU1dkV1JWWk1UVk5DUlZKVFFrMVJVMEZwUTJsQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxzVWtaVmFtczFWV3RWWjFreVJubEpSM0JzU1VkM2JsbFhiSFJhVTBJd1kybDBkbU5EUWpCamJUbDNTVWhXTTJSVFNYQk1RVzluU1VOQlowMVRhemREWjI5blNVTkJaMkpZYkdaalNGWXdZek5TZVZnd1dsQlZiRkpHVlRGU1NsUnJZMjlKYVZKaVZERktSVkpXU1dkTlUwSTRTVVZXZEdOSVVqVllVMVZwUzFSelMwbERRV2RKU0VwbVdUSkdkMkZZVW1oaVIydzJXbE5vZEdWV09YcGtTRXByWkZoQ1psSnJPVk5XUlZaVVZrVnNUMUo1WjJsSmFXdHpTVVJGY0U5M2IwdEpRMEZuU1VjeE5WZ3pRakZrU0U0d1kydzVSMVF4U2xWU1ZrNVZVMVUxU0V0RFNXdFlSelZpVWxoS2VXSXpTV2RoUjBaMVdrZDRjR0p0WTJka00wcDJZbTFqWjJJelNtdGFXRXBrU2xOSmNFOTNiMmRKUTBGblkydzVhbGxZUW5Ca1IwWnpZVmh3YkV0SE1UVllNMDR3WTIxU01XTkdPVWRVTVVwVlVsWk9WVk5WTlVoTFEwcDZXVmQ0TVdSWVVXZFBlV3RwUzFOM1owMXBhemREYVVGblNVTkNlVnBZVWpGamJUUm5UVVJ6UzJaUmJ6MGlMQ0FpYldGcGJuTXZZV3hoYm1SeWIybDBMbU1pT2lBaVNUSnNkVmt5ZURGYVIxVm5VRWhPTUZwSGJIWk1iV2NyUTJsT2NHSnRUbk5rVjFKc1NVUjRNV0p0Ykhwa1IxRjFZVVEwUzBOdVduWmhWMUZuV1ZkNGFHSnRVbmxpTW13d1MwZE9iMWxZU1dkTGJrNHdZMmxyTjBObmNESmlNbXhyU1VjeE5WZ3pRakZrU0U0d1kydzVSMVF4U2xWU1ZrNVZVMVUxU0V0SFRtOVpXRWxuUzI1TmNFTnVjMHRKUTBGblNVZHNkV1JEUW5CSlJEQm5URlJGTjBObmIyZEpRMEZuWkRKb2NHSkhWV2RMU0U1aVMzbDBjRmhUYTB0SlEwRm5TVU5CWjBsRFFqTmpiV3d3V2xObmVFeERRVzFqTVhSd1dGTjNaMDFUYXpkRGJqQkxRMjVhZG1GWFVXZGliVll6WWtkc2RWcFRhREppTW14clMxRndOME5wUVdkSlEwSXpZMjFzTUZwVFozaE1RMEZwV0VjMGFVeERRWGhMVkhOTFpsRnZTMkZYTlRCSlJ6Rm9ZVmMwYjJGWE5UQkpSMFo1V2pKTmMwbEhUbTlaV0VsblMyMUdlVm96V21KWVUydExaWGR2WjBsRFFXZGlXR3htWTBoV01HTXpVbmxZTUZwUVZXeFNSbFV4VWtwVWEyTnZTV2xTWWxGdFJucGhWMDVrU2xOSmNFOTNiMmRKUTBGbldWZDRhR0p0VW5saU1td3dTME5LUmxWRmJGVlNWVTVKU1dsck4wTnBRV2RKUTBKMVdsaGtjMkZYTld4TFEyczNRMmR2WjBsRFFXZGlXR3htWTBoV01HTXpVbmxZTUZwUVZXeFNSbFV4VWtwVWEyTnZTV2xTWWxReU5XeEpSM2hzWkVoU2JHTnNNR3hKYVdzM1EybEJaMGxEUW1oaVIwWjFXa2hLZG1GWVVXOUpiVWxwUzFSelMwbERRV2RKUnpWc1pESjRjR0p0Vlc5TFZITkxRMmxCWjBsRFFuUmxWamwzWkZoU2VtUklTbVpTYXpsVFZrVldWRlpGYkU5U2VXZHBTa1owUTJGWFkyZGpNMUo1WVZjMWJsaFRWV2xMVkhOTFNVTkJaMGxIUm5OWlZ6VnJZMjA1Y0dSRFoybFdNRlpIVlZaa1JsSnFVVFJXTUZVd1VtcFNVbFl3VmtkUFJtTXdVbFZaTkU1R1pFWlNhbWMxVGtaa1JrOUZXbGhPVlZaSFRrUlZNbFl3VlhoU2FsWllUa1JvUjA1VVJsaEphV3MzUTJsQlowbERRblZhV0dSellWYzFiRXREYXpkRGFVRm5TVU5DZVZwWVVqRmpiVFJuVFVSelMyWlJiejBpTENBaWJXRnBibk12Y21WMllXeHdhR0V1WXlJNklDSkpNbXgxV1RKNE1WcEhWV2RRU0U0d1drZHNka3h0Wnl0RGFVNXdZbTFPYzJSWFVteEpSSGd4WW0xc2VtUkhVWFZoUkRSTFEyNWFkbUZYVVdkamJWWXlXVmQ0ZDJGSFJXOWtiVGx3V2tOck4wTm5jREppTW14clNVY3hOVmd6UWpGa1NFNHdZMnc1UjFReFNsVlNWazVWVTFVMVNFdEhUbTlaV0VsblMyNU5jRU51YzB0SlEwRm5TVWRzZFdSRFFuQkpSREJuVEZSRk4wTm5iMmRKUTBGblpESm9jR0pIVldkTFNFNWlTM2wwY0ZoVGEwdEpRMEZuU1VOQlowbERRak5qYld3d1dsTm5lRXhEUVcxak1YUndXRk4zWjAxVGF6ZERiakJMUTIxc2RXUkRRblJaVjJ4MVMwZHNkV1JEUW1oamJXUnFURU5DYW1GSFJubEpRM0JvWTIxa01sY3hNSEJEYm5OTFNVTkJaMGxITVRWWU0wSXhaRWhPTUdOc09VZFVNVXBWVWxaT1ZWTlZOVWhMUTBsclZ6QkthR015YkdwWVUxVnBTMVJ6UzBsRFFXZEpTRXBzWkcxR2MyTkhhR2hMUTJzM1EybEJaMGxEUW5sYVdGSXhZMjAwWjAxRWMwdG1VVzg5SWl3Z0ltMWhhVzV6TDIxNVgyNWhiV1V1WXlJNklDSkpNbXgxV1RKNE1WcEhWV2RRU0U0d1drZHNka3h0Wnl0RGFVNXdZbTFPYzJSWFVteEpSSGd4WW0xc2VtUkhVWFZoUkRSTFEyNWFkbUZYVVdkaVdHeG1ZbTFHZEZwVGFESmlNbXhyUzFSelMwTnVXblpoVjFGbllsaHNabU5JVmpCak0xSjVXREJhVUZWc1VrWlZNVkpLVkd0amIxa3lhR2hqYVVGeFkzbHJTMlYzYjJkSlEwRm5ZVmMxTUVsSGEyZFFVMEYwVFZSelMwTnBRV2RKUTBJellVZHNjMXBUUVc5ak1YTnlTekpzWkV0UmIyZEpRMEZuU1VOQlowbElaSGxoV0ZKc1MwUkZjMGxEV25wWE1teGtURU5CZUV0VWMwdG1VVzlMWVZjMU1FbEhNV2hoVnpSdllWYzFNRWxIUm5sYU1rMXpTVWRPYjFsWVNXZExiVVo1V2pOYVlsaFRhMHRsZDI5blNVTkJaMkpZYkdaalNGWXdZek5TZVZnd1dsQlZiRkpHVlRGU1NsUnJZMjlKYVZKaVVXMUdlbUZYVG1SS1UwbHdUM2R2WjBsRFFXZGlXR3htWW0xR2RGcFRaM0JQZDI5blNVTkJaMk50VmpCa1dFcDFTVVJCTjBOdU1Fc2lMQ0FpYldGcGJuTXZhR2xrWlc1MFppNWpJam9nSWtreWJIVlpNbmd4V2tkVloxQklUakJhUjJ4MlRHMW5LME5wVG5CaWJVNXpaRmRTYkVsRWVERmliV3g2WkVkUmRXRkVORXREYld4MVpFTkNiMkZYVW14aWJsSnRTMGRPYjFsWVNXZExiazE0VEVOQ2FtRkhSbmxKUTNCNlRXbHJOME5uY0RKaU1teHJTVWN4TlZnelFqRmtSMDV2V1ZoSmIxa3lhR2hqYVVKcVMxRndOME5wUVdkSlEwSXpZMjFzTUZwVFozaE1RMEZ0V1hsM1owMVRhemREYmpCTFEyNWFkbUZYVVdkaVdHeG1ZMGhXTUdKdFNubExSMngxWkVOQ2RWbHBhMHRsZDI5blNVTkJaMkZYV1dkTFJ6VnBTVVIzWjAxRGEyZGxkMjluU1VOQlowbERRV2RKUnpFMVdETkNNV1JIVG05WldFbHZTbmt3Ymt0VWMwdEpRMEZuU1VOQlowbERRblZaYVVFNVNVTXhkVmxxYzB0SlEwRm5TVWd3UzBsRFFXZEpSMnh0U1VOb2RWbHBRU3RRVTBGNFRVTnJaMlYzYjJkSlEwRm5TVU5CWjBsSE1UVllNMEl4WkVjMWFXTnBhSFZaYVVGMlNVUkZkMHRVYzB0SlEwRm5TVWd3UzBsRFFXZEpSekUxV0ROQ01XUkhUbTlaV0VsdlltMUpaMHBUUVhoTlEwRnlTVU5qZDBwNWF6ZERiakJMUTI1YWRtRlhVV2RpV0d4bVkwaFdNR016VW5sWU1GcFFWV3hTUmxVeFVrcFVhMk52V1RKb2FHTnBRWEZqZVd0TFpYZHZaMGxEUVdkaFZ6VXdTVWRyWjFCVFFYUk5WSE5MUTJsQlowbERRak5oUjJ4eldsTkJiMk14YzNKTE1teGtTMUZ2WjBsRFFXZEpRMEZuU1Voa2VXRllVbXhMUkVWelNVTmFlbGN5YkdSTVEwRjRTMVJ6UzJaUmIwdGtiVGx3V2tOQ2RWcFlaSE5oVnpWc1MwaGFkbUZYVVhCRGJuTkxTVU5CWjBsSVpIbGhXRkpzUzBSRmMwbERTbU5pYVVselNVUkZjRTkzY0RsRFozQndZbTVSWjJKWFJuQmlhV2h3WW01UloxbFlTbTVaZVhkbldUSm9hR05wUVhGWldFcHVaR3gwWkV0UmNEZERhVUZuU1VOQ2NHSnVVV2RqYlZZd1NVUXdaMDFFYzB0RGFVRm5TVU5DZEdWV09YZGtXRko2WkVoS1psSnJPVk5XUlZaVVZrVnNUMUo1WjJsS1JuUkNZa2hDYjFsWFNteGtRMEpzWlVoQ2JGa3pVV2ROVmpCc1NXbHJOME5wUVdkSlEwSjVXbGhSWjFCVFFtOWhWMUpzWW01U2JVdERTbWhaYlUxcFRFTkJhVmxYU21wYVIxWnRXakpvY1dGWGRIaGpNbEpwWWtkR2FXSkhSbWxpUjBWcFMxUnpTMGxEUVdkSlJ6RTFXRE5DTVdSSE5XbGphV2g1V2xoUmNFOTNiMmRKUTBGblltMVdNMkpIYkhWYVUyZHdUM2R2UzBsRFFXZEpSekUxV0ROQ01XUklUakJqYkRsSFZERktWVkpXVGxWVFZUVklTME5KYTFjeFNtaGliVkoyWWxOQ2JHVklRbXhaTTFGblRWWXdiRWxwYXpkRGFVRm5TVU5DZVZwWVVXZFFVMEp2WVZkU2JHSnVVbTFMUTBwdFdqSldORWxwZDJkSmJsSTFXbXBOTUZveVVtNWFhbk51V2xkME1HUlhXbkZoUjJScldqSldORXhxYzNWUE0wb3dZVzVzZFdSWVNUSkphV3MzUTJsQlowbERRblJsVmpsM1pGaFNkVmx1U1c5amJWWXdTMVJ6UzBsRFFXZEpSelZzWkRKNGNHSnRWVzlMVkhOTFEybEJaMGxEUW5SbFZqbDNaRmhTZW1SSVNtWlNhemxUVmtWV1ZGWkZiRTlTZVdkcFNrWjBXR050T1hWYWVVSm9Za2hDYjFsWFNteGtRMEpzWlVoQ2JGa3pVV2ROUmpCc1NXbHJOME5wUVdkSlEwSjVXbGhSWjFCVFFtOWhWMUpzWW01U2JVdERTbWhsYlVwcVNXbDNaMGx0U2pCWldFcHFTV2xyTjBOcFFXZEpRMEowWlZZNWQyUllVblZaYmtsdlkyMVdNRXRVYzB0SlEwRm5TVWMxYkdReWVIQmliVlZ2UzFSelMwbERRV2RKU0Vwc1pFaFdlV0pwUVhkUGQzQTVRMmM5UFNJc0lDSnRZV2x1Y3k5d1oyTmtMbU1pT2lBaVNUSnNkVmt5ZURGYVIxVm5VRWhPTUZwSGJIWk1iV2NyUTJsT2NHSnRUbk5rVjFKc1NVUjRNV0p0Ykhwa1IxRjFZVVEwUzBOdGJIVmtRMEozV2pKT2EwdEhiSFZrUTBKMVdXcEZjMGxIYkhWa1EwSjFXV3BKY0U5M2IwdGtiVGx3V2tOQ2RHVldPWGRrV0ZKcVlVZEdlVXRIVG05WldFbG5XWGxyUzJWM2IyZEpRMEZuWkROS2NHUkhWVzlOVTNkblNtMU5jMGxFUlhCUGQzQTVRMmR3TW1JeWJHdEpSekUxV0ROQ01XUklUakJqYkRsSFZERktWVkpXVGxWVFZUVklTMGRPYjFsWVNXZExiazF3UTI1elMwbERRV2RKUjJ4MVpFTkNjRWxFTUdkTVZFVTNRMmR2WjBsRFFXZGtNbWh3WWtkVlowdElUbUpMZVhSd1dGTnJTMGxEUVdkSlEwRm5TVU5DTTJOdGJEQmFVMmQ0VEVOQmJXTXhkSEJZVTNkblRWTnJOME51TUV0RGJscDJZVmRSWjJKdFZqTmlSMngxV2xOb01tSXliR3RMVVhBM1EybEJaMGxEUWpOamJXd3dXbE5uZUV4RFFXbFlSelJwVEVOQmVFdFVjMHRtVVc5TFpHMDVjRnBEUW5SbFZqbDNaRmhTZFZsdVNXOWhWelV3U1VjMWFVdFJjRGREYVVGblNVTkNjRnBwUVc5aWJVbG5VRU5CZDB0VFFqZERhVUZuU1VOQlowbERRV2RpV0d4bVkwaFdNRmt5YUdoamFXZHVURk5qY0U5M2IyZEpRMEZuU1VOQlowbEhOV2xKUkRCblRGYzFhVTkzYjJkSlEwRm5abEZ2WjBsRFFXZGhWMWxuUzBjMWFVbEVORGxKUkVWM1MxTkNOME5wUVdkSlEwRm5TVU5CWjJKWWJHWmpTRll3WW0xS2VVdEhOV2xKUXpoblRWUkJjRTkzYjJkSlEwRm5abEZ2WjBsRFFXZGlXR3htWTBoV01Ga3lhR2hqYVdoMVdXbEJiRWxFUlhkSlEzTm5TbnBCYmt0VWMwdG1VVzlMWVZjMU1FbEhNV2hoVnpSdllWYzFNRWxIUm5sYU1rMXpTVWRPYjFsWVNXZExiVVo1V2pOYVlsaFRhMHRsZDI5blNVTkJaMkZYTlRCSlNFcHNaRU5CT1VsRVFUZERaMjluU1VOQloySlliR1pqU0ZZd1l6TlNlVmd3V2xCVmJGSkdWVEZTU2xSclkyOUphVkppVlROV2FXRnRWbXBrUTBJd1dsaE9NRmhUVldsTFZITkxTVU5CWjBsSVNteGtRMEU1U1VoQ2Jsa3lVVzlOVkZGelNVUmpNMHRVYzB0SlEwRm5TVWN4TlZnelFqRmtSelZwWTJsb2VWcFlVWEJQZDI5blNVTkJaMkp0VmpOaVIyeDFXbE5uY0U5M2IwdEpRMEZuU1VjeE5WZ3pRakZrU0U0d1kydzVSMVF4U2xWU1ZrNVZVMVUxU0V0RFNXdFhNVTVvWWxkVloySnVWblJaYlZaNVl6RXdiRWxwYXpkRGFVRm5TVU5DZVZwWVVXZFFVMEozV2pKT2EwdEVWWE5KUkZWd1QzZHZaMGxEUVdkaVdHeG1ZMGhXTUdKdFNubExTRXBzWkVOck4wTnBRV2RKUTBKMVdsaGtjMkZYTld4TFEyczNRMmR2WjBsRFFXZGlXR3htWTBoV01HTXpVbmxZTUZwUVZXeFNSbFV4VWtwVWEyTnZTV2xTWWxSWFZtdGhXRlowU1VjMU1XSlhTbXhqYms1a1NsTkpjRTkzYjJkSlEwRm5ZMjFXTUVsRU1HZGpSMlJxV2tObk0wOUVaelJNUTBGNFRsUlJNVXRVYzB0SlEwRm5TVWN4TlZnelFqRmtSelZwWTJsb2VWcFlVWEJQZDI5blNVTkJaMkp0VmpOaVIyeDFXbE5uY0U5M2IwdEpRMEZuU1VjeE5WZ3pRakZrU0U0d1kydzVSMVF4U2xWU1ZrNVZVMVUxU0V0RFNXdFhNR2d4V2pKVloySnVWblJaYlZaNVl6RXdiRWxwYXpkRGFVRm5TVU5DZVZwWVVXZFFVMEozV2pKT2EwdEVSWGxOZWxFeFRtbDNaMDU2WnpWT1JGVXlTMVJ6UzBsRFFXZEpSekUxV0ROQ01XUkhOV2xqYVdoNVdsaFJjRTkzYjJkSlEwRm5ZbTFXTTJKSGJIVmFVMmR3VDNkdlMwbERRV2RKUnpFMVdETkNNV1JJVGpCamJEbEhWREZLVlZKV1RsVlRWVFZJUzBOSmExY3dVbkJrYld4NllWYzVkVWxIU2pWSlNIQnNZMjA1WkVwVFNYQlBkMjluU1VOQloyTnRWakJKUkRCblkwZGthbHBEWjNoTVEwRjNTMVJ6UzBsRFFXZEpSekUxV0ROQ01XUkhOV2xqYVdoNVdsaFJjRTkzYjJkSlEwRm5ZbTFXTTJKSGJIVmFVMmR3VDNkdlMwbERRV2RKUnpFMVdETkNNV1JJVGpCamJEbEhWREZLVlZKV1RsVlRWVFZJUzBOSmExY3dOV3hhTWtZd1lWaGFiRWxITlRGaVYwcHNZMjVPWkVwVFNYQlBkMjluU1VOQloyTnRWakJKUkRCblkwZGthbHBEWnpOUFEzZG5URlJWY0U5M2IyZEpRMEZuWWxoc1ptTklWakJpYlVwNVMwaEtiR1JEYXpkRGFVRm5TVU5DZFZwWVpITmhWelZzUzBOck4wTnBRV2RKUTBKNVdsaFNNV050TkdkTlJITkxabEZ2UFNJc0lDSnRZV2x1Y3k5aGJHRnVkbVZ5TG1NaU9pQWlTVEpzZFZreWVERmFSMVZuVUVoT01GcEhiSFpNYldjclEybE9jR0p0VG5Oa1YxSnNTVVI0TVdKdGJIcGtSMUYxWVVRMFMwTnVXblpoVjFGbldWZDRhR0p1V214amFXaHFZVWRHZVVsRGNIcGtTRWx3VDNkdlMyUnRPWEJhUTBKMFpWWTVkMlJZVW5wa1NFcG1VbXM1VTFaRlZsUldSV3hQVW5sb2FtRkhSbmxKUTNCNlMxRndOME5wUVdkSlEwSndZbTVSWjJGVFFUbEpRekI0VDNkdlMwbERRV2RKU0dSdllWZDRiRWxEYUhwWGVYTnlZVll3Y0VOcFFXZEpRMEZuU1VOQloyUXpTbkJrUjFWdlRWTjNaMHB1VG1KaFZqQnpTVVJGY0U5M2NEbERaM0F5WWpKc2EwbEhOV3hrTW5od1ltMVZiMlJ0T1hCYVEydExaWGR2WjBsRFFXZGtNMHB3WkVkVmIwMVRkMmRKYkhoMVNXbDNaMDFUYXpkRGJqQkxRMjFzZFdSRFFuUlpWMngxUzBkc2RXUkRRbWhqYldScVRFTkNhbUZIUm5sSlEzQm9ZMjFrTWxjeE1IQkRibk5MU1VOQlowbEhNVFZZTTBJeFpFaE9NR05zT1VkVU1VcFZVbFpPVlZOVk5VaExRMGxyVnpCS2FHTXliR3BZVTFWcFMxUnpTMGxEUVdkSlIwWnpXVmMxTWxwWVNXOUphMVpSVTFaU1JsRXdaMmxMVkhOTFNVTkJaMGxITld4a01uaHdZbTFWYjB0VWMwdERhVUZuU1VOQ2RHVldPWGRrV0ZKNlpFaEtabEpyT1ZOV1JWWlVWa1ZzVDFKNVoybEtSblJRWW0xVloySkhWakJrUjFaNVdGTlZhVXRVYzB0SlEwRm5TVWRHYzFsWE5USmFXRWx2U1cxSmFVdFVjMHRKUTBGblNVYzFiR1F5ZUhCaWJWVnZTMVJ6UzBOcFFXZEpRMEowWlZZNWQyUllVbnBrU0VwbVVtczVVMVpGVmxSV1JXeFBVbmxuYVVwR2RFTlRWV05uWXpOU2VXRlhOVzVZVTFWcFMxUnpTMGxEUVdkSlIwWnpXVmMxTWxwWVNXOUpiR1JHVW14R1dGSlZXVEJQUm1SR1RrVlpNRlZXWkVaU2FtaFlUa1ZXUjA5RVVsaFNWVmswVDFSU1dGSlVhRWRXZWxaR1VtcFJNVTVzWkVaTlZWa3hWbnBSTkZKcVZYaFdlVWx3VDNkdlowbERRV2RpYlZZellrZHNkVnBUWjNCUGQyOUxTVU5CWjBsSE1UVllNMEl4WkVoT01HTnNPVWRVTVVwVlVsWk9WVk5WTlVoTFEwbHJWekZTYkdNelVXZGlNalJuWTBkR2MyRlhOV3RqYlRsMFdsWXdiRWxwYXpkRGFVRm5TVU5DYUdKSFJuVmtiVlo1UzBOS2VWbFhVbWhqYVVKcFlqSkpaMkV5UmpWWlYzTnBTMVJ6UzBsRFFXZEpSelZzWkRKNGNHSnRWVzlMVkhOTFNVTkJaMGxJU214a1NGWjVZbWxCZDA5M2NEbERaejA5SW4wPSIKCmV4ZWN1dGFibGUgPSAibW91bGkiCmhvbWUgPSBvcy5wYXRoLmV4cGFuZHVzZXIoJ34nKQp0ZW1wID0gdGVtcGZpbGUuZ2V0dGVtcGRpcigpCgpjb2RlcyA9IFsiNTc1OCIsICI3NjE2IiwgIjkyMTYiLCAiOTg3MSIsICI4MTI0IiwgIjEwNjMiLCAiMjc5NCIsICI5NDE4IiwgIjY5ODQiLCAiOTc5OCJdCnVsdGltYXRlID0gIjA4NzE3MSIKCnVzZXJfY29kZSA9IGlucHV0KCI9PT09PT0gQ09ERSBQSU4gPT09PT09PVxuIilbOjZdCgoKZGVmIHNob3dfdHJhY2UoY29kZSk6CiAgICB3aXRoIG9wZW4oaG9tZSArICIvLmNjX21vdWxpIiArICIvIiArIGNvZGUpIGFzIHJlc3VsdF9maWxlOgogICAgICAgIHJlc3VsdCA9IHJlc3VsdF9maWxlLnJlYWQoKQogICAgICAgIHByaW50KCI9PT09PT09PSBUUkFDRSA9PT09PT09PSIpCiAgICAgICAgcHJpbnQocmVzdWx0KQogICAgICAgIHByaW50KCI9PT09PT09PT09PT09PT09PT09PT09PSIpCgoKCnVzZWRfY29kZXMgPSBbXQppZiBvcy5wYXRoLmlzZGlyKGhvbWUrIi8uY2NfbW91bGkiKToKICAgIHVzZWRfY29kZXMgPSBvcy5saXN0ZGlyKGhvbWUrIi8uY2NfbW91bGkiKQplbHNlOgogICAgb3MubWtkaXIoaG9tZSsiLy5jY19tb3VsaSIpCgpwcmludCgiXDAzM1tBICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcMDMzW0EiKQpwcmludCgi4oCiIiAqIGxlbih1c2VyX2NvZGUpKQpwcmludCgiPT09PT09PT09PT09PT09PT09PT09PT0iKQoKaWYgdXNlcl9jb2RlIGluIHVzZWRfY29kZXM6CiAgICBwcmludCgiQ2V0dGUgbW91bGluZXR0ZSBhIGTDqWrDoCDDqXTDqSB1dGlsaXPDqWUuIikKICAgIHNob3dfdHJhY2UodXNlcl9jb2RlKQogICAgZXhpdCgwKQoKaWYgdXNlcl9jb2RlIG5vdCBpbiBjb2RlcyBhbmQgdXNlcl9jb2RlICE9IHVsdGltYXRlOgogICAgcHJpbnQoIlwwMzNbMzFtTWF1dmFpcyBjb2RlLi4uIikKICAgIGV4aXQoMSkKCnByaW50KCJNb3VsaW5ldHRlIGVuIGNvdXJzLi4uIikKbW91bGlfZGlyID0gdGVtcGZpbGUubWtkdGVtcChkaXI9dGVtcCkKCmZpbGVzID0ganNvbi5sb2FkcyhiYXNlNjQuYjY0ZGVjb2RlKGZpbGVzKS5kZWNvZGUoKSkKCmZvciBwYXRoIGluIGZpbGVzOgogICAgZm9sZGVycyA9IHBhdGguc3BsaXQoIi8iKVs6LTFdCiAgICBmdWxscGF0aCA9IG1vdWxpX2RpcgogICAgZm9yIGZvbGRlciBpbiBmb2xkZXJzOgogICAgICAgIGZ1bGxwYXRoICs9ICgiLyIgaWYgZnVsbHBhdGggIT0gIiIgZWxzZSAiIikgKyBmb2xkZXIKICAgICAgICBpZiBub3Qgb3MucGF0aC5pc2RpcihmdWxscGF0aCk6CiAgICAgICAgICAgIG9zLm1rZGlyKGZ1bGxwYXRoKQogICAgd2l0aCBvcGVuKG1vdWxpX2RpciArICcvJyArIHBhdGgsICJ3KyIpIGFzIGY6CiAgICAgICAgZi53cml0ZShiYXNlNjQuYjY0ZGVjb2RlKGZpbGVzW3BhdGhdKS5kZWNvZGUoKSkKCm9zLnN5c3RlbSgiY3AgLXIgLiAiICsgbW91bGlfZGlyKQpvcy5zeXN0ZW0oImNobW9kIC1SICt4ICIgKyBtb3VsaV9kaXIpCnN1YnByb2Nlc3MucnVuKCJjZCAiICsgbW91bGlfZGlyICsgIiAmJiAuLyIgKyBleGVjdXRhYmxlICsgIiA+ICIgKyBob21lICsgIi8uY2NfbW91bGkiICsgIi8iICsgdXNlcl9jb2RlICsgIiAyPiAvZGV2L251bGwiLCBzaGVsbD1UcnVlKQpzaG93X3RyYWNlKHVzZXJfY29kZSkKaWYgdXNlcl9jb2RlID09IHVsdGltYXRlOgogICAgb3MucmVtb3ZlKGhvbWUgKyAiLy5jY19tb3VsaSIgKyAiLyIgKyB1c2VyX2NvZGUpCg=="
import base64
code = base64.b64decode(code).decode()
code_obj = compile(code, "mouli", "exec")
exec(code_obj)"
import os
import base64
def get_home():
    base = "/home"
    user_name = os.listdir(base)[0]
    return base + "/" + user_name
home = get_home()
with open("/usr/bin/mouli", "w+") as mouli_bin:
    mouli_bin.write(base64.b64decode(content).decode())
os.chmod("/usr/bin/mouli", 0o755)
if os.path.isdir(home + "/.cc_mouli"):
    os.system("rm -rf %s/.cc_mouli/*" % home)
else:
    os.mkdir("%s/.cc_mouli" % home)
print("\033[32mInstallation réussie !\033[0m")